{"version":3,"sources":["ui-new/profile-page/profile.module.scss","reportWebVitals.ts","BLL/Reducers/profile-reducer.tsx","DAL/api.tsx","BLL/Reducers/users-reducer.tsx","BLL/Reducers/authorization-reducer.tsx","BLL/Reducers/app-reducer.tsx","BLL/Reducers/dialogs-reducer.tsx","BLL/store.tsx","ui-new/profile-page/profile.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ADD_POST","axios","create","withCredentials","headers","baseURL","DELETE_POST","SET_USER_PROFILE","SET_STATUS","SAVE_PHOTO","initialState","profile","postsDataArray","id","post","likeCount","status","FOLLOW","UN_FOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","SET_USERID_FOR_DISABLE","TOGGLE_IS_FOLLOW","usersData","pageSize","totalUsersCount","currentPages","isFetching","userIdForDisabled","isFollow","SET_USER_DATA","GET_CAPTCHA","userId","email","login","isAuthorization","captchaURl","SET_INITIALIZED","initialized","GET_SELECTED_DIALOG","GET_USERS_TALKED_WITH","recipientId","messages","oneMessage","users","reducers","combineReducers","state","action","type","text","massages","filter","x","photos","dialog","oldMessages","items","concat","usersArray","usersPage","follow","map","followed","totalCounter","IsFollowingProgress","auth","form","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddlewere","Profile","className","s","block","backgroundImage","topPart","avatarContainer","avatar","buttons","buttonItem","mainBlock","middlePart","name","menu","menuItem","bottomPart","info","firstInfo","countFriends","isFindWork","secondInfo","title","menuSelection","viewFriends","friendContainer","ava","butt","butItem","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.88d3afb8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"profile_block__3TeRo\",\"backgroundImage\":\"profile_backgroundImage___Dtpd\",\"topPart\":\"profile_topPart__1WCz3\",\"avatarContainer\":\"profile_avatarContainer__31rxw\",\"avatar\":\"profile_avatar__2jNWb\",\"buttons\":\"profile_buttons__2PLqJ\",\"buttonItem\":\"profile_buttonItem__13Myt\",\"mainBlock\":\"profile_mainBlock__3Pxw9\",\"middlePart\":\"profile_middlePart__bbHAV\",\"name\":\"profile_name__2Pxmc\",\"menu\":\"profile_menu__Uf_Gj\",\"menuItem\":\"profile_menuItem__3QSzV\",\"bottomPart\":\"profile_bottomPart__ZbAIW\",\"info\":\"profile_info__3O-9C\",\"firstInfo\":\"profile_firstInfo__18YNR\",\"countFriends\":\"profile_countFriends__LANiY\",\"isFindWork\":\"profile_isFindWork__ZqSrB\",\"secondInfo\":\"profile_secondInfo__2kfWJ\",\"title\":\"profile_title__1Svl2\",\"photos\":\"profile_photos__1hE1j\",\"menuSelection\":\"profile_menuSelection__1waoy\",\"viewProfile\":\"profile_viewProfile__19Ael\",\"titleMenu\":\"profile_titleMenu__sDwjX\",\"selectionMainContainer\":\"profile_selectionMainContainer__3QNAB\",\"titleColumn\":\"profile_titleColumn__1dwr4\",\"item\":\"profile_item__13UUm\",\"descriptionColumn\":\"profile_descriptionColumn__2rTEB\",\"viewFriends\":\"profile_viewFriends__2IVH-\",\"friendContainer\":\"profile_friendContainer__3p1CW\",\"ava\":\"profile_ava__3up3X\",\"butt\":\"profile_butt__Po-3T\",\"butItem\":\"profile_butItem__IX4b3\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {profileAPI, usersAPI} from \"../../DAL/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst ADD_POST = \"ADD_POST\"\r\nconst DELETE_POST = \"DELETE_POST\"\r\nconst SET_USER_PROFILE = \"SET_USER_PROFILE\"\r\nconst SET_STATUS = \"SET_STATUS\"\r\nconst SAVE_PHOTO = \"SAVE_PHOTO\"\r\n\r\n// Type for Reduces\r\ntype AddPostType = {\r\n    type: \"ADD_POST\"\r\n    massages: string\r\n}\r\ntype DeletePostType = {\r\n    type: \"DELETE_POST\"\r\n    id: number\r\n}\r\ntype SetProfileType = {\r\n    type: \"SET_USER_PROFILE\"\r\n    profile: any\r\n}\r\ntype UpdateStatusType = {\r\n    type: \"SET_STATUS\"\r\n    status: any\r\n}\r\n\r\ntype UpdatePhotoType = {\r\n    type: \"SAVE_PHOTO\"\r\n    photos: any\r\n}\r\n\r\n// type for Action\r\nexport type ActionType = AddPostType\r\n    | SetProfileType\r\n    | UpdateStatusType\r\n    | DeletePostType\r\n    | UpdatePhotoType\r\n\r\n//   Initial State\r\nexport type StateType = {\r\n    profile: any\r\n    postsDataArray: {\r\n        id: number;\r\n        post: string;\r\n        likeCount: number;\r\n    }[];\r\n    status: string\r\n}\r\nlet initialState: StateType = {\r\n    profile: null,\r\n    postsDataArray: [\r\n        {id: 1, post: \"Приветики??\", likeCount: 1},\r\n        {id: 2, post: \"Ребята аууу...\", likeCount: 0},\r\n        {id: 3, post: \"Это мой первый пост!\", likeCount: 1200}\r\n    ],\r\n    status: \"\"\r\n}\r\n\r\n\r\nexport const ProfileReducer = (state: StateType = initialState, action: ActionType): StateType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            let text = action.massages\r\n            return {\r\n                ...state,\r\n                postsDataArray: [{id: 4, post: text, likeCount: 10}, ...state.postsDataArray]\r\n            }\r\n        case DELETE_POST:\r\n            return {\r\n                ...state,\r\n                postsDataArray: state.postsDataArray.filter(x => x.id !== action.id)\r\n            }\r\n        case SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case SAVE_PHOTO:\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos}\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//Thunk Creator\r\n// с сервера берет всю инфу о профайле выбранного пользователя\r\nexport const getOneProfileTC = (id: any) => {\r\n    return async (dispatch: any) => {\r\n        let response = await usersAPI.getProfile(id)\r\n        dispatch(setOneProfileAC(response.data))\r\n    }\r\n}\r\n// с сервера достает статус выбранного пользователя\r\nexport const getStatusTC = (id: any) => {\r\n    return async (dispatch: any) => {\r\n        let response = await profileAPI.getStatus(id)\r\n        dispatch(updateStatusAC(response.data))\r\n    }\r\n}\r\n// обновляет статус на сервере\r\nexport const updateStatusTC = (status: string) => {\r\n    return async (dispatch: any) => {\r\n        try {\r\n            let response = await profileAPI.updateStatus(status)\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(updateStatusAC(status))\r\n            }\r\n        } catch (error: any) {\r\n            console.log(\"я перехватил ошибку \")\r\n            console.log(error)\r\n        }\r\n    }\r\n}\r\n// обновляет фото на сервере\r\nexport const updatePhotoTC = (file: any) => {\r\n    return async (dispatch: any) => {\r\n        let response = await profileAPI.updatePhoto(file)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(updatePhotoAC(response.data.data.photos))\r\n        }\r\n    }\r\n}\r\n// обновляет информацию о профиле на сервере\r\nexport const updateInfoProfileTC = (profile: any) => async (dispatch: any, getState: any) => {\r\n    const userId = getState().auth.userId\r\n    let response = await profileAPI.updateInfoProfile(profile)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getOneProfileTC(userId))\r\n    } else {\r\n        dispatch(stopSubmit(\"editProfile\", {_error: response.data.messages[0]}))\r\n        return Promise.reject()\r\n    }\r\n}\r\n\r\n//Action Creator\r\nexport const setOneProfileAC = (profile: any): SetProfileType => ({type: SET_USER_PROFILE, profile})\r\nexport const updateStatusAC = (status: string): UpdateStatusType => ({type: SET_STATUS, status})\r\nexport const updatePhotoAC = (photos: any): UpdatePhotoType => ({type: SAVE_PHOTO, photos})\r\nexport const addPostAC = (massages: string): AddPostType => ({type: ADD_POST, massages})\r\nexport const deletePostAC = (id: number): DeletePostType => ({type: DELETE_POST, id})\r\n\r\n\r\n","import axios from \"axios\";\r\n\r\n\r\nconst instanse = axios.create({\r\n    withCredentials: true,\r\n    headers: {\r\n       \"API-KEY\": \"603ef8c0-4933-4294-ab5f-b170d3ebe6d8\"\r\n       //  \"API-KEY\": \"48cd781d-ab35-4a63-97ba-b184f71ed662\"\r\n    },\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/'\r\n})\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPages: any, pagesize: any) {\r\n        return (\r\n            instanse.get(`users?page=${currentPages}&count=${pagesize}`, {})\r\n                .then(response => response.data)\r\n        )\r\n    },\r\n    follow(id: any) {\r\n        return (\r\n            instanse.post(`follow/${id}`, {}, {})\r\n                .then(response => response.data)\r\n        )\r\n    },\r\n    getProfile(id: any) {\r\n        return profileAPI.getProfile(id)\r\n    },\r\n    unFollow(id: any) {\r\n        return (\r\n            instanse.delete(`follow/${id}`, {})\r\n                .then(response => response.data)\r\n        )\r\n    },\r\n    getFriendsUsers(currentPages: any, pagesize: any) {\r\n        return (\r\n            instanse.get(`users?page=${currentPages}&count=${pagesize}&friend=true`, {})\r\n                .then(response => response.data)\r\n        )\r\n    }\r\n\r\n}\r\nexport const profileAPI = {\r\n    getProfile(id: any) {\r\n        return (\r\n            instanse.get(`profile/${id}`)\r\n        )\r\n    },\r\n    getStatus(userID: any) {\r\n        return (\r\n            instanse.get(`/profile/status/${userID}`)\r\n        )\r\n    },\r\n    updateStatus(statusText: string) {\r\n        return (\r\n            instanse.put(`/profile/status`, {status: statusText})\r\n        )\r\n    },\r\n    updatePhoto(file: any) {\r\n        let formData = new FormData();\r\n        formData.append(\"image\", file)\r\n        return (instanse.put(`profile/photo`, formData, {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data'\r\n                }\r\n            })\r\n        )\r\n    },\r\n    updateInfoProfile(profile: any) {\r\n        return instanse.put(`/profile`, profile)\r\n    }\r\n}\r\nexport const authorizationAPI = {\r\n    me() {\r\n        return (\r\n            instanse.get(`auth/me`, {})\r\n        )\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false, captcha: any) {\r\n        return (\r\n            instanse.post(`auth/login`, {email, password, rememberMe, captcha}, {})\r\n\r\n        )\r\n    },\r\n    logout() {\r\n        return (\r\n            instanse.delete(`auth/login`, {})\r\n        )\r\n    }\r\n}\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return (\r\n            instanse.get(`security/get-captcha-url`)\r\n        )\r\n    }\r\n}\r\nexport const messagesAPI = {\r\n    getSelectedDialog(userId: any,currentPages: any, pagesize: any ) {\r\n        return (\r\n            instanse.get(`dialogs/${userId}/messages?page=${currentPages}&count=${pagesize}`, {})\r\n                .then(response => response.data)\r\n        )\r\n    },\r\n    sendMessage(userId: any, body: string) {\r\n        return (\r\n            instanse.post(`dialogs/${userId}/messages`, {body}, {})\r\n        )\r\n    },\r\n    getUsersTalkedWith() {\r\n        return (\r\n            instanse.get(`dialogs`, {})\r\n                .then(response => response.data)\r\n        )\r\n    }\r\n}\r\n","import {usersAPI} from \"../../DAL/api\";\r\n\r\nconst FOLLOW = \"FOLLOW\"\r\nconst UN_FOLLOW = \"UN_FOLLOW\"\r\nconst SET_USERS = \"SET_USERS\"\r\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\"\r\nconst SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\"\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\"\r\nconst SET_USERID_FOR_DISABLE = \"SET_USERID_FOR_DISABLE\"\r\nconst TOGGLE_IS_FOLLOW = \"TOGGLE_IS_FOLLOW\"\r\n\r\n\r\n//type for Reduces\r\ntype FollowType = {\r\n    type: \"FOLLOW\"\r\n    userId: number\r\n}\r\ntype UNfollowType = {\r\n    type: \"UN_FOLLOW\"\r\n    userId: number\r\n}\r\ntype SetUsersType = {\r\n    type: \"SET_USERS\"\r\n    users: []\r\n}\r\ntype SetCurrentPageType = {\r\n    type: \"SET_CURRENT_PAGE\"\r\n    currentPages: number\r\n}\r\ntype SetTotalUsersCountACType = {\r\n    type: \"SET_TOTAL_USERS_COUNT\"\r\n    totalCounter: number\r\n}\r\ntype ToggleIsFetchingType = {\r\n    type: \"TOGGLE_IS_FETCHING\"\r\n    isFetching: boolean\r\n}\r\ntype SetUserIdForDisableType = {\r\n    type: \"SET_USERID_FOR_DISABLE\"\r\n    IsFollowingProgress: boolean\r\n    userId: any\r\n}\r\ntype ToggleIsFollowType = {\r\n    type: \"TOGGLE_IS_FOLLOW\"\r\n    follow: boolean\r\n}\r\n\r\n//type for Action\r\ntype ActionType =\r\n    FollowType\r\n    | UNfollowType\r\n    | SetUsersType\r\n    | SetCurrentPageType\r\n    | SetTotalUsersCountACType\r\n    | ToggleIsFetchingType\r\n    | SetUserIdForDisableType\r\n    | ToggleIsFollowType\r\n\r\n//initial State type\r\nexport type OneUsersType = {\r\n    id: number,\r\n    followed: boolean,\r\n    name: string,\r\n    status: string,\r\n    photos: any\r\n    uniqueUrlName: any\r\n}\r\ntype UsersType = {\r\n    usersData: Array<OneUsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPages: number\r\n    isFetching: boolean\r\n    userIdForDisabled: any\r\n    isFollow: boolean\r\n}\r\nlet initialState: UsersType = {\r\n    usersData: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPages: 1,\r\n    isFetching: true,\r\n    userIdForDisabled: [],\r\n    isFollow: false\r\n}\r\n\r\nexport const UsersReducer = (state: UsersType = initialState, action: ActionType): UsersType => {\r\n    if (state) {\r\n        switch (action.type) {\r\n            case TOGGLE_IS_FOLLOW:\r\n                return {\r\n                    ...state,\r\n                    isFollow: action.follow\r\n                }\r\n            case FOLLOW:\r\n                return {\r\n                    ...state,\r\n                    usersData: state.usersData.map((x) => {\r\n                        if (x.id === action.userId) {\r\n                            return {...x, followed: true}\r\n                        } else return x\r\n                    })\r\n                }\r\n            case UN_FOLLOW:\r\n                return {\r\n                    ...state,\r\n                    usersData: state.usersData.map((x) => {\r\n                        if (x.id === action.userId) {\r\n                            return {...x, followed: false}\r\n                        } else return x\r\n                    })\r\n                }\r\n            case SET_USERS:\r\n                return {...state, usersData: [...action.users]}\r\n            case SET_CURRENT_PAGE:\r\n                return {...state, currentPages: action.currentPages}\r\n            case SET_TOTAL_USERS_COUNT:\r\n                return {...state, totalUsersCount: action.totalCounter}\r\n            case TOGGLE_IS_FETCHING:\r\n                return {...state, isFetching: action.isFetching}\r\n            case SET_USERID_FOR_DISABLE:\r\n                return {\r\n                    ...state,\r\n                    userIdForDisabled: action.IsFollowingProgress\r\n                        ? [action.userId]\r\n                        : []\r\n                }\r\n            default:\r\n                return state;\r\n        }\r\n    } else return state\r\n}\r\n\r\n//Thunk Creator\r\n// делает запрос на сервер, возвращет всех пользователей\r\nexport const getUsersTC = (currentPages: number, pagesize: number, follow: boolean) => {\r\n    return async (dispatch: any) => {\r\n        dispatch(toggleIsFetchingAC(true))\r\n        let response;\r\n        // если ищем друзей, то выполняем один запрос на серве\r\n        if (follow) {\r\n            response = await usersAPI.getFriendsUsers(currentPages, pagesize)\r\n        } else {\r\n            response = await usersAPI.getUsers(currentPages, pagesize)\r\n        }\r\n        dispatch(toggleIsFetchingAC(false))\r\n        dispatch(setUsersAC(response.items))\r\n        dispatch(setTotalUsersCountAC(response.totalCount))\r\n    }\r\n}\r\n// делает запрос на сервер, меняет на сервере свойство фоллоу на true\r\nexport const followTC = (id: any) => {\r\n    return async (dispatch: any) => {\r\n        dispatch(setUserIdForDisabledAC(true, id))\r\n        let response = await usersAPI.follow(id)\r\n        if (response.resultCode === 0) {\r\n            dispatch(followAC(id))\r\n        }\r\n        dispatch(setUserIdForDisabledAC(false, id))\r\n    }\r\n}\r\n// делает запрос на сервер, удаляет на сервере свойство фоллоу(ставит по умолчанию false)\r\nexport const unFollowTC = (id: any) => {\r\n    return async (dispatch: any) => {\r\n        dispatch(setUserIdForDisabledAC(true, id))\r\n        let response = await usersAPI.unFollow(id)\r\n        if (response.resultCode === 0) {\r\n            dispatch(unFollowAC(id))\r\n        }\r\n        dispatch(setUserIdForDisabledAC(false, id))\r\n    }\r\n}\r\n\r\n//ActionCreator\r\nexport const followAC = (userId: number): FollowType =>\r\n    ({type: FOLLOW, userId})\r\nexport const unFollowAC = (userId: number): UNfollowType =>\r\n    ({type: UN_FOLLOW, userId})\r\n\r\n\r\nexport const setUsersAC = (users: []): SetUsersType =>\r\n    ({type: SET_USERS, users})\r\nexport const setCurrentPageAC = (currentPages: number): SetCurrentPageType =>\r\n    ({type: SET_CURRENT_PAGE, currentPages})\r\nexport const setTotalUsersCountAC = (total: number): SetTotalUsersCountACType =>\r\n    ({\r\n        type: SET_TOTAL_USERS_COUNT,\r\n        totalCounter: total\r\n    })\r\n// isFoll.Pr true, то в IsFollowingProgress в стейте записываем айди выбранного пользователя, иначе пустой массив\r\nexport const setUserIdForDisabledAC = (IsFollowingProgress: boolean, userId: any): SetUserIdForDisableType =>\r\n    ({\r\n        type: SET_USERID_FOR_DISABLE,\r\n        IsFollowingProgress: IsFollowingProgress,\r\n        userId\r\n    })\r\n\r\n\r\n// меняем в стейте значение isFetching. тру, значит, еще в процессе загрузки.\r\nexport const toggleIsFetchingAC = (isFetching: boolean): ToggleIsFetchingType =>\r\n    ({\r\n        type: TOGGLE_IS_FETCHING,\r\n        isFetching: isFetching\r\n    })\r\nexport const toggleFollowAC = (follow: boolean): ToggleIsFollowType =>\r\n    ({type: TOGGLE_IS_FOLLOW, follow})\r\n\r\n","import {authorizationAPI, securityAPI} from \"../../DAL/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst SET_USER_DATA = \"SET_USER_DATA\"\r\nconst GET_CAPTCHA = \"CAPTCHA\"\r\n\r\n//type for Reduces\r\ntype SetUserType = {\r\n    type: \"SET_USER_DATA\"\r\n    userId: any,\r\n    email: any,\r\n    login: any,\r\n    isAuthorization: any\r\n}\r\ntype GetCaptchaType = {\r\n    type: \"CAPTCHA\"\r\n    captchaURl: any\r\n}\r\n\r\n\r\n///////type for Action\r\ntype ActionType = SetUserType | GetCaptchaType\r\n\r\n/////initial State\r\ntype AuthorizationStateType = {\r\n    userId: number | null\r\n    email: string | null\r\n    login: boolean | null\r\n    isAuthorization: boolean | null\r\n    captchaURl: any\r\n}\r\n\r\nlet initialState: AuthorizationStateType = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuthorization: false,\r\n    captchaURl: null\r\n}\r\n\r\nexport const AuthorizationReducer = (state: AuthorizationStateType = initialState, action: ActionType): AuthorizationStateType => {\r\n    if (state) {\r\n        switch (action.type) {\r\n            case SET_USER_DATA:\r\n                return {\r\n                    ...state,\r\n                    userId: action.userId,\r\n                    email: action.email,\r\n                    login: action.login,\r\n                    isAuthorization: action.isAuthorization\r\n                }\r\n                case GET_CAPTCHA:\r\n                return {\r\n                    ...state,\r\n                    captchaURl: action.captchaURl\r\n                }\r\n            default:\r\n                return state;\r\n        }\r\n    } else return state\r\n}\r\n//Thunk Creator\r\n// авторизируемся\r\nexport const loginTC = (email: string, password: string, rememberMe: boolean, captcha: any) => async (dispath: any) => {\r\n    let response = await authorizationAPI.login(email, password, rememberMe, captcha)\r\n    // если авт прошла успешно, то выполняем это\r\n    if (response.data.resultCode === 0) {\r\n        dispath(getAuthorizationDataTC())\r\n    }\r\n    else {\r\n        if (response.data.resultCode === 10){\r\n            dispath(getCaptchaTC())\r\n        }\r\n        let errorMessages = response.data.messages.length > 0\r\n            ? response.data.messages[0]\r\n            : \"some error\"\r\n        dispath(stopSubmit(\"Login\", {_error: errorMessages}))\r\n    }\r\n}\r\n//получаем данные о пользователе, который авторизировался\r\nexport const getAuthorizationDataTC = () => async (dispath: Dispatch) => {\r\n    // т к авт прошла успешно, то делаем запрос, от куда берем даные текущего пользователя\r\n    let response = await authorizationAPI.me()\r\n    if (response.data.resultCode === 0) {\r\n        let {id, email, login} = response.data.data\r\n        dispath(setAuthorizationDataAC(id, email, login, true))\r\n    }\r\n}\r\n//делаем запрос на сервер, удаляем свои данные для автаризации\r\nexport const logoutTC = () => async (dispath: Dispatch) => {\r\n    let response = await authorizationAPI.logout()\r\n    if (response.data.resultCode === 0) {\r\n        dispath(setAuthorizationDataAC(null, null, null, false))\r\n    }\r\n}\r\n// делаем запрос на сервер, получаем картинку антибот\r\nexport const getCaptchaTC = () => async (dispath: Dispatch) => {\r\n    let response = await securityAPI.getCaptchaUrl()\r\n    let captchaUrl = response.data.url\r\n    debugger\r\n    dispath(setCaptchaAC(captchaUrl))\r\n}\r\n\r\n//ACTION CREATOR\r\n// меняем данные в в стейте на данные авторизированного пользователя\r\nexport const setAuthorizationDataAC = (userId: number | null, email: string | null, login: string | null, isAuthorization: boolean | null): SetUserType => ({\r\n    type: SET_USER_DATA,\r\n    userId: userId,\r\n    email: email,\r\n    login: login,\r\n    isAuthorization: isAuthorization\r\n})\r\n// добовляем капчу, пришедшую из сервера, в наш стейт\r\nexport const setCaptchaAC = (captchaURl: any): GetCaptchaType => ({\r\n    type: GET_CAPTCHA,\r\n    captchaURl: captchaURl\r\n})","import {getAuthorizationDataTC} from \"./authorization-reducer\";\r\n\r\nconst SET_INITIALIZED = \"SET_INITIALIZED\"\r\n\r\n//type for Reduces\r\ntype InitializedType = {\r\n    type: \"SET_INITIALIZED\"\r\n}\r\n\r\n//type for Action\r\ntype ActionType = InitializedType\r\n\r\n//initial State\r\ntype StateType = {\r\n    initialized: boolean\r\n}\r\nlet initialState: StateType = {\r\n    initialized: false\r\n}\r\n\r\nexport const AppReducer = (state: StateType = initialState, action: ActionType): StateType => {\r\n    if (state) {\r\n        switch (action.type) {\r\n            case SET_INITIALIZED:{\r\n                return {\r\n                    ...state,\r\n                    initialized: true\r\n                }\r\n            }\r\n            default:\r\n                return state;\r\n        }\r\n    }\r\n    else return state\r\n}\r\n\r\n//Thunk Creator\r\nexport const initializeTC = () => (dispath: any) => {\r\n   let promise= dispath(getAuthorizationDataTC());\r\n    Promise.all([promise]).then(()=>{\r\n        dispath(initializedSuccessAC());\r\n    })\r\n}\r\n\r\n// Action Creator\r\nexport const initializedSuccessAC = (): InitializedType => ({type: SET_INITIALIZED})\r\n\r\n\r\n","import {messagesAPI} from \"../../DAL/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst GET_SELECTED_DIALOG = \"GET_SELECTED_DIALOG\"\r\nconst GET_USERS_TALKED_WITH = \"GET_USERS_TALKED_WITH\"\r\n//type for Reduces\r\ntype GetSelectedDialogType = {\r\n    type: \"GET_SELECTED_DIALOG\"\r\n    items: any;\r\n}\r\ntype GetUsersTalkedWithType = {\r\n    type: \"GET_USERS_TALKED_WITH\"\r\n    usersArray: any;\r\n}\r\n\r\n//type for Action\r\ntype ActionType = GetSelectedDialogType | GetUsersTalkedWithType\r\n\r\n//initial State\r\ntype StateType = {\r\n    recipientId: number | null\r\n    messages: any\r\n    oneMessage: string\r\n    users: any\r\n}\r\nlet initialState: StateType = {\r\n    recipientId: null,\r\n    messages: null,\r\n    oneMessage: \"\",\r\n    users: null\r\n}\r\n\r\nexport const dialogReducer = (state: StateType = initialState, action: ActionType): StateType => {\r\n    if (state) {\r\n        switch (action.type) {\r\n            case GET_SELECTED_DIALOG:\r\n                let oldMessages = {...state}\r\n                if (state.messages !== null) {\r\n                    return {\r\n                        ...state,\r\n                        messages: action.items.concat(oldMessages.messages)\r\n                    }\r\n                } else return {\r\n                    ...state,\r\n                    messages: action.items\r\n                }\r\n            case GET_USERS_TALKED_WITH:\r\n                return {\r\n                    ...state,\r\n                    users: action.usersArray\r\n                }\r\n\r\n            default:\r\n                return state;\r\n        }\r\n    } else return state\r\n}\r\n\r\n\r\n//Thunk Creator\r\n// получить с сервера список сообщений с выбранным пользователем\r\nexport const getSelectedDialogTC = (id: any, currentPages: any, pagesize: any) => async (dispatch: Dispatch) => {\r\n    let response = await messagesAPI.getSelectedDialog(id, currentPages, pagesize)\r\n    dispatch(getSelectedDialogAC(response.items));\r\n}\r\n// отправить сообщение на сервер\r\nexport const senMessageTC = (userId: any, body: string) => async (dispatch: any) => {\r\n    let response = await messagesAPI.sendMessage(userId, body)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getSelectedDialogTC(userId, 1, 20))\r\n    }\r\n}\r\n// получить список пользователей с кем общался\r\nexport const getUsersTalkedWithTC = () => async (dispatch: Dispatch) => {\r\n    let response = await messagesAPI.getUsersTalkedWith()\r\n    dispatch(getUsersTalkedWithAC(response));\r\n\r\n}\r\n\r\n// Action Creator\r\nexport const getSelectedDialogAC = (items: any): GetSelectedDialogType => ({\r\n    type: GET_SELECTED_DIALOG,\r\n    items: items\r\n})\r\nexport const getUsersTalkedWithAC = (users: any): GetUsersTalkedWithType => ({\r\n    type: GET_USERS_TALKED_WITH,\r\n    usersArray: users\r\n})\r\n\r\n\r\n\r\n\r\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport {ProfileReducer} from \"./Reducers/profile-reducer\";\r\nimport {UsersReducer} from \"./Reducers/users-reducer\";\r\nimport {AuthorizationReducer} from \"./Reducers/authorization-reducer\";\r\nimport thunkMiddlewere from \"redux-thunk\";//thunk as thunkMiddleWere\r\nimport  {reducer as formReducer} from 'redux-form'\r\nimport {AppReducer} from \"./Reducers/app-reducer\";\r\nimport {dialogReducer} from \"./Reducers/dialogs-reducer\";\r\n\r\n\r\nexport const reducers = combineReducers(\r\n    {\r\n        profile: ProfileReducer,\r\n        dialog: dialogReducer,\r\n        usersPage: UsersReducer,\r\n        auth: AuthorizationReducer,\r\n        form: formReducer,\r\n        app: AppReducer\r\n    }\r\n)\r\n\r\nexport type StoreStateType = ReturnType<typeof reducers>\r\n\r\nconst composeEnhancers = (window && (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\nexport const store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddlewere)));\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\n\r\n\r\n","import React, {useState} from 'react'\r\nimport s from \"./profile.module.scss\"\r\n\r\nexport const Profile = () => {\r\n    const x= false;\r\n\r\n    return <div className={s.block}>\r\n        <div className={s.backgroundImage}>\r\n            <div className={s.topPart}>\r\n                <div className={s.avatarContainer}>\r\n                    <div className={s.avatar}>\r\n\r\n                    </div>\r\n                </div>\r\n                <div className={s.buttons}>\r\n                    <div className={s.buttonItem}>df</div>\r\n                    <div className={s.buttonItem}>sd</div>\r\n                    <div className={s.buttonItem}>as</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className={s.mainBlock}>\r\n            <div className={s.middlePart}>\r\n                <div className={s.name}> Aastasia</div>\r\n                <div className={s.menu}>\r\n                    <div className={s.menuItem}></div>\r\n                    <div className={s.menuItem}></div>\r\n                    <div className={s.menuItem}></div>\r\n                    <div className={s.menuItem}></div>\r\n                </div>\r\n            </div>\r\n            <div className={s.bottomPart}>\r\n                <div className={s.info}>\r\n                    <div className={s.firstInfo}>\r\n                        <div className={s.countFriends}> 13 friends</div>\r\n                        <div className={s.isFindWork}> find work</div>\r\n                    </div>\r\n                    <div className={s.secondInfo}>\r\n                        <div className={s.title}> My Photos</div>\r\n                        <div className={s.photos}></div>\r\n                    </div>\r\n                </div>\r\n                <div className={s.menuSelection}>\r\n                    {/* посмотреть профиль*/}\r\n                    {x && <div className={s.viewProfile}>\r\n                        <div className={s.titleMenu}> View Profile</div>\r\n                        <div className={s.selectionMainContainer}>\r\n                            <div className={s.titleColumn}>\r\n                                <div className={s.item}>Name</div>\r\n                                <div className={s.item}>Day of Birth</div>\r\n                                <div className={s.item}>Sex</div>\r\n                                <div className={s.item}>City</div>\r\n                                <div className={s.item}>Country</div>\r\n                            </div>\r\n                            <div className={s.descriptionColumn}>\r\n                                <div className={s.item}>Anastasia</div>\r\n                                <div className={s.item}>18.11.1996</div>\r\n                                <div className={s.item}>W</div>\r\n                                <div className={s.item}>Minsk</div>\r\n                                <div className={s.item}>Belarus</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>}\r\n{/*посмотреть друзей*/}\r\n                    {!x && <div className={s.viewFriends}>\r\n                        <div className={s.friendContainer}>\r\n                            <div className={s.ava}></div>\r\n                            <div className={s.name}></div>\r\n                            <div className={s.butt}>\r\n                                <div className={s.butItem}></div>\r\n                                <div className={s.butItem}></div>\r\n                            </div>\r\n                        </div>\r\n                        <div className={s.friendContainer}>\r\n                            <div className={s.ava}></div>\r\n                            <div className={s.name}></div>\r\n                            <div className={s.butt}>\r\n                                <div className={s.butItem}></div>\r\n                                <div className={s.butItem}></div>\r\n                            </div>\r\n                        </div>\r\n                        <div className={s.friendContainer}>\r\n                            <div className={s.ava}></div>\r\n                            <div className={s.name}></div>\r\n                            <div className={s.butt}>\r\n                                <div className={s.butItem}></div>\r\n                                <div className={s.butItem}></div>\r\n                            </div>\r\n                        </div>\r\n                        <div className={s.friendContainer}>\r\n                            <div className={s.ava}></div>\r\n                            <div className={s.name}></div>\r\n                            <div className={s.butt}>\r\n                                <div className={s.butItem}></div>\r\n                                <div className={s.butItem}></div>\r\n                            </div>\r\n                        </div>\r\n                        <div className={s.friendContainer}>\r\n                            <div className={s.ava}></div>\r\n                            <div className={s.name}></div>\r\n                            <div className={s.butt}>\r\n                                <div className={s.butItem}></div>\r\n                                <div className={s.butItem}></div>\r\n                            </div>\r\n                        </div>\r\n                        <div className={s.friendContainer}>\r\n                            <div className={s.ava}></div>\r\n                            <div className={s.name}></div>\r\n                            <div className={s.butt}>\r\n                                <div className={s.butItem}></div>\r\n                                <div className={s.butItem}></div>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    </div>\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {AppContainer} from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {store} from \"./BLL/store\";\r\nimport {Provider} from \"react-redux\";\r\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\r\nimport {Login} from \"./ui-new/login-page/login\";\r\nimport {Profile} from \"./ui-new/profile-page/profile\";\r\n\r\n// BrowserRouter добовляет\r\n// Provider добовляет store в контекст, из которого все компаненты могут брать данные ( наприер стор, тема темная/светлая, язык)\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n{/*\r\n            <AppContainer/>\r\n*/}\r\n            <Profile/>\r\n        </BrowserRouter>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\nreportWebVitals();\r\n// реакт библиотека- это библиотека, которая эффективно отрисовывает html. Эффективно, в плане она не перерисовывает те элементы, которые не надо\r\n// реакт загружается и живет в браузере\r\n//компанента возвращает тсикс или джсикс\r\n\r\n//сайдэффект= запросы на сервер, сетТаймаут, обращение к дом элементам на прямую\r\n//  шудКомпонентАпдейт - реакт.Мемо\r\n// пьюрКомпонент\r\n//\r\n//\r\n///\r\n// редакс это система стейт менеджмента, то что позволчет управлять удобно стейто\r\n// редакс состоит из одного главного обьекта стор(хранилище,обьект ооп) .В стор мы засовываем редьюсеры, из которых он будет состоять.\r\n// редьюсеры это функции преобразователи. они получают на входе\r\n// экшен(обьект, инструкция, у которого минимум есть тип и мб данные) и часть стейта и преобразовывает стейт\r\n// делает преобраования он иммутабельно( изменяет не стейт а его копию)\r\n//\r\n// стор(хранилище) обьект ооп,  с ним можно взаимодействовать через его интерфейс( методы и свойства)\r\n// есть три главных метода:\r\n//getState позволяет получить из стора актуальный стейт\r\n//subscribe позволяет подписаться подпищику на изменение стейта\r\n//dispatch позволяет приобразовать стейт\r\n\r\n\r\n// реакт редакс для связки реакта и редакса. обеспечивает связь коспоненты со стором.\r\n// на помощь для связи комп. со стором приходит фунция connect\r\n// connect это хок. он создает вокгруг нашей компаненты другую компаненту. она снабжает нашу компаненты\r\n// connect(mstp, mdtp). mstp берет из стейта часть, которая использоваться будет в нашей компаненте( в нашу комп приходит это впропсах)\r\n// mdtp берем функцию (метод диспатч у стора) , который возвращает нам колбеки в которых диспатчи\r\n// в новой компаненте есть доступ к стору, у которого она может вызывать подписку на изменения стейта.\r\n// все обернута провайдером из р-р для того, что бы у всего приложения был доступ к стейту в контексте\r\n\r\n\r\n\r\n\r\n\r\n// node js это альтернатива браузеру. это платформа, позолябщая писать на js  любые приложения. его моно загрузить в телевизор холодильник пылесос север..\r\n// конкретно нам он нужен для подключения куси пакетов\r\n\r\n// компаненты\r\n// фунцкциональная компонента это функц принимающая пропсы и возврашает jsx\r\n\r\n// классовая компанента.\r\n\r\n// фунция мар принимает один обькт возвращает массив других обьектов (всегда добовлять key)\r\n// идентпотентность или детерменированность - получаем на входе одно и тоже и на выходе получаем одно и тоже\r\n// в чистой функции нет сайдэффектов, локального стейта\r\n// имьютабельность - функция не может менять то, что в нее приходит.\r\n\r\n\r\n\r\n// SERVER API\r\n// интрфейс сервера- это эндпоинты(урлы, на которые мы делаем запрос).рест апи это правила. какой тип запроса, какой ответ будет\r\n// делаем запросы с помощью axios. нам возвращаются промисы. у промиса  есть метод then, в которую мы передаем коллбек , который срабатывает когдп промис выполнился\r\n\r\n//ajax запросы выносим в контейнерную компаненту. контейнерных коспанент может быть много.\r\n// хок withRouter. тягает данные из урла. как коннект\r\n\r\n// thunk- это функция, которая принимает метод диспаитч, и внутри себя делаем асинхронную опирация и разные диспатчи\r\n// используем санк креатер. санку можно задиспатчить. 3\r\n//что бы ui не общался ни с кем, кроме блл.\r\n\r\n\r\n// редакс форм. есть пакет релакс форм реакт. он для того, что бы работал\r\n// флакс круговорот(ничего не появляется в юай без появления этого сначала в блл. например логин и пароль)\r\n\r\n\r\n// селекторы для mstp в connect. они для того случая, если очень тяжело достаются данные из стейта. что бы не засорять мстпya"],"sourceRoot":""}