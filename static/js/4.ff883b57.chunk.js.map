{"version":3,"sources":["UI/component/Profile/MyPost/MyPosts.module.css","UI/component/Profile/MyPost/Post/Post.module.css","UI/component/Profile/ProfileInfo/any/Status/ProfileStatusHOC.tsx","UI/component/Profile/ProfileInfo/any/UserInfoEdit.tsx","UI/component/Profile/ProfileInfo/any/Contact.tsx","UI/component/Profile/ProfileInfo/any/UserInfo.tsx","UI/component/Profile/ProfileInfo/any/Status/ProfileStatus.tsx","UI/component/Profile/ProfileInfo/ProfileInfo.tsx","UI/component/Profile/MyPost/Post/Post.tsx","UI/component/Profile/MyPost/MyPosts.tsx","UI/component/Profile/MyPost/MyPostsContainer.tsx","UI/component/Profile/Profile.tsx","UI/component/Profile/ProfoleConteiner.tsx"],"names":["module","exports","ProfileStatusHOC","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","target","value","UserInfoEditForm","reduxForm","form","handleSubmit","profile","error","console","log","onSubmit","className","style","formSunnierError","createFormField","Input","type","Textarea","Object","keys","contacts","map","key","Contact","contactTitle","contactValue","UserInfo","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","ownerId","Button","variant","color","onClick","goToEditeMode","ProfileStatus","state","activateEditMode","setState","offEditMode","onStatusChange","prevProps","prevState","snapshot","this","React","Component","ProfileInfo","Preloader","Grid","container","spacing","item","xs","sm","photos","large","height","width","src","no_image","files","length","updatePhoto","to","userId","activeClassName","c","act","formData","updateInfoProfile","then","initialValues","Post","onePostElement","likeCount","MyPosts","memo","postArrayDefoult","posts","reverse","element","post","deletePost","id","s","area","PostReduxForm","addpost","massages","maxLenghtCreater","maxLength","Field","placeholder","component","name","validate","requiredField","MyPostsContainer","connect","postsDataArray","dispatch","addPostAC","deletePostAC","Profile","ProfileConteiner","match","params","userID","authorizationUserId","history","push","getOneProfile","getStatus","refreshProfile","ProfileConteinerConnect","compose","auth","isAuthorization","getOneProfileTC","getStatusTC","updateStatusTC","updatePhotoTC","updateInfoProfileTC","withRouter"],"mappings":"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","file":"static/js/4.ff883b57.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"MyPosts_post__2q_k7\",\"area\":\"MyPosts_area__1_16U\",\"add\":\"MyPosts_add__1_vqn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__jZkh_\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n//статус в виде функциональной  компоненты\r\nexport const ProfileStatusHOC = (props: any) => {\r\n    let[editMode, setEditMode]=useState(false)\r\n    let[status, setStatus]=useState(props.status)\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n\r\n    const activateEditMode=()=>{\r\n        setEditMode(true)\r\n    }\r\n\r\n   const offEditMode = () => {\r\n       setEditMode(false)\r\n       props.updateStatus(status)\r\n    }\r\n    const onStatusChange=(e:ChangeEvent<HTMLInputElement>)=>{\r\n        setStatus( e.target.value)\r\n    }\r\n\r\n    return <>\r\n        <b>Статус: </b>\r\n        {!editMode &&\r\n            <span onDoubleClick={activateEditMode}>{props.status || \"-----\"}</span>\r\n        }\r\n        {editMode &&\r\n            <input autoFocus={true}\r\n                   onBlur={offEditMode}\r\n                   onChange={onStatusChange}\r\n            value={status}/>\r\n        }\r\n    </>\r\n}\r\n","import React from \"react\";\r\nimport {createFormField, Input, Textarea} from \"../../../Common/FormsControl/FormsControl\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport style from \"../../../Common/FormsControl/forms.module.css\";\r\n\r\nexport const UserInfoEdit=({handleSubmit, profile, error}: any)=>{\r\n    console.log(profile)\r\n    return(\r\n        <form onSubmit={handleSubmit}>\r\n            {error && <div className={style.formSunnierError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <b>FullName: </b> {createFormField(\"Full name\", \"fullName\", [], Input)}\r\n            </div>\r\n\r\n            <div>\r\n                <b>looking for a job: </b>{createFormField(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}\r\n            </div>\r\n\r\n            <div>\r\n                <b>I can: </b>\r\n                {createFormField(\"skils\", \"lookingForAJobDescription\", [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>About me: </b>\r\n                {createFormField(\"About me\", \"aboutMe\", [], Textarea)}\r\n\r\n            </div>\r\n            <div>\r\n                <b>Contacts: {Object.keys(profile.contacts).map(key=>{\r\n                    return <div key={key}>\r\n                        <b>{key}: {createFormField(key, \"contacts.\"+key, [], Input)}</b>\r\n                    </div>\r\n                    }\r\n                )}</b>\r\n            </div>\r\n            <button>save</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const UserInfoEditForm: any = reduxForm({ form: 'editProfile'})(UserInfoEdit)\r\n\r\n\r\n","import React from \"react\";\r\n\r\nexport const Contact = (props: any) => {\r\n    return (\r\n        <div><b>{props.contactTitle}: </b>{props.contactValue}</div>\r\n    )\r\n}","import {Button} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {Contact} from \"./Contact\";\r\n\r\nexport const UserInfo = (props: any) => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h2><b>FullName: </b>{props.profile.fullName}</h2>\r\n            </div>\r\n\r\n            <div>\r\n                <b>looking for a job: </b>{props.profile.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {props.profile.lookingForAJobDescription &&\r\n            <div>\r\n                <b>I can: </b>{props.profile.lookingForAJobDescription}\r\n            </div>}\r\n            <div>\r\n                <b>About me: </b>{props.profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts: </b>{Object.keys(props.profile.contacts).map(key => {\r\n                return <Contact key={key} contactTitle={key} contactValue={props.profile.contacts[key]}/>\r\n            })}\r\n            </div>\r\n            {props.ownerId &&\r\n            <Button variant=\"contained\" color=\"primary\" onClick={props.goToEditeMode}>edit Data</Button>}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\n//статус в виде классовой компоненты\r\nexport class ProfileStatus extends React.Component<any, any> {\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n    activateEditMode = () => {\r\n        this.setState({editMode: true})\r\n    }\r\n    offEditMode = () => {\r\n        this.setState({editMode: false})\r\n        this.props.updateStatus(this.state.status)\r\n    }\r\n    onStatusChange=(e:ChangeEvent<HTMLInputElement>)=>{\r\n        this.setState({\r\n       status: e.target.value})\r\n    }\r\n    componentDidUpdate(prevProps:Readonly<any>, prevState:Readonly<any>, snapshot?:any){\r\n       if(prevProps.status!==this.props.status) this.setState({\r\n            status: this.props.status\r\n        })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return <>\r\n            {!this.state.editMode\r\n                ? <div>\r\n                    <span onDoubleClick={this.activateEditMode}>{this.props.status || \"-----\"}</span>\r\n                </div>\r\n                : <div>\r\n                    <input onChange={this.onStatusChange} autoFocus={true} onBlur={this.offEditMode} value={this.state.status}/>\r\n                </div>\r\n            }\r\n        </>\r\n    }\r\n}\r\n","import React, {useState} from 'react';\r\nimport {Preloader} from \"../../Common/Preloader/Preloader\";\r\nimport {ProfileStatusHOC} from \"./any/Status/ProfileStatusHOC\";\r\nimport no_image from \"../../../assets/img/no_image.png\"\r\nimport {UserInfoEditForm} from \"./any/UserInfoEdit\";\r\nimport {Button, Grid, Input} from \"@material-ui/core\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport c from \"../../Nav/Nav.module.css\";\r\nimport {UserInfo} from \"./any/UserInfo\";\r\nimport {ProfileStatus} from \"./any/Status/ProfileStatus\";\r\n\r\ntype ProfileInfoType = {\r\n    profile: any\r\n    status: any\r\n    updateStatus: any\r\n    ownerId: any\r\n    updatePhoto: any\r\n    updateInfoProfile: any\r\n}\r\n\r\nexport const ProfileInfo = (props: ProfileInfoType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n// пока профайл не пришел с сервера, показываем загрузку страницы\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const updatePhoto = (e: any/*: ChangeEvent<HTMLInputElement>*/) => {\r\n        if (e.target.files.length) {\r\n            props.updatePhoto(e.target.files[0])\r\n        }\r\n    }\r\n//отправка данных с формы на сервер через санку. когда данные отправились, то меняемм  режим редактирования\r\n    const onSubmit = (formData: any) => {\r\n        props.updateInfoProfile(formData)\r\n            .then(() => {\r\n                setEditMode(false);\r\n            })\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={0}>\r\n            <Grid item xs={12} sm={5}>\r\n                {props.profile.photos.large === null\r\n                    ? <img height={150} width={150} src={no_image}/>\r\n                    : <img src={props.profile.photos.large}/>}\r\n                <Grid>\r\n                    {/*разные виды профайла*/}\r\n                    <ProfileStatusHOC status={props.status} updateStatus={props.updateStatus}/>\r\n                    <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\r\n                </Grid>\r\n                {/*если мы на странице владельца то показываем изменение фото*/}\r\n                <Grid>\r\n                    {props.ownerId && <Input color=\"primary\" type={\"file\"} onChange={updatePhoto}/>}\r\n                </Grid>\r\n                <Grid>\r\n                    {/*если на странице НЕТ владельца, то показываем возможность начать диалог*/}\r\n                    {!props.ownerId &&\r\n                    <NavLink to={'/dialogs/' + props.profile.userId} activeClassName={c.act}>\r\n                        <Button variant=\"contained\" color=\"primary\">Start dialog</Button>\r\n                    </NavLink>}\r\n                </Grid>\r\n            </Grid>\r\n            {/* Информация о пользователе */}\r\n            <Grid item xs={12} sm={7}>\r\n                {editMode\r\n                    ? <UserInfoEditForm onSubmit={onSubmit} initialValues={props.profile} profile={props.profile}/>\r\n                    : <UserInfo profile={props.profile} ownerId={props.ownerId} goToEditeMode={() => {\r\n                        setEditMode(true)\r\n                    }}/>\r\n                }\r\n            </Grid>\r\n        </Grid>)\r\n}","import React from 'react';\r\nimport style from './Post.module.css'\r\n\r\n\r\ntype MyProps = {\r\n    onePostElement: string;\r\n    likeCount: number;\r\n}\r\n\r\n\r\nexport const Post = (props: MyProps) => {\r\n\r\n    return (\r\n        <div>\r\n            <div className='posts'>\r\n                <div className={style.item}>\r\n                    <img src='https://klike.net/uploads/posts/2019-06/1560329641_2.jpg'/>\r\n                    {props.onePostElement}\r\n                    <div>\r\n                        <span>\"Like {props.likeCount}\"</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport {Post} from \"./Post/Post\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLength, requiredField} from '../../../utils/validators/validators';\r\nimport {Textarea} from \"../../Common/FormsControl/FormsControl\";\r\nimport {Button} from \"@material-ui/core\";\r\n\r\nexport type StateTypePosts = {\r\n    posts: {\r\n        id: number;\r\n        post: string;\r\n        likeCount: number;\r\n    }[];\r\n}\r\nexport type DispatchTypePosts = {\r\n    addpost: (massages: string) => void\r\n    deletePost: (id:number)=>void\r\n}\r\n\r\ntype MyPostType = StateTypePosts & DispatchTypePosts\r\n\r\n\r\nexport const MyPosts=React.memo((props: MyPostType)=> {\r\n\r\n\r\n    let postArrayDefoult = [...props.posts]\r\n\r\n        .reverse()\r\n        .map((element: any) =>\r\n        <div key={element.id}><Post onePostElement={element.post} likeCount={element.likeCount} />\r\n            <button onClick={()=>{props.deletePost(element.id)}}>x</button>\r\n        </div>\r\n    )\r\n\r\n    let onSumbit = (value: any) => {\r\n        props.addpost(value.massages);\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.post}>\r\n                My post\r\n                <div>\r\n                    <div className={s.area}>\r\n                        <PostReduxForm onSubmit={onSumbit}/>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n            {postArrayDefoult}\r\n        </div>\r\n    )\r\n})\r\n\r\nconst maxLenghtCreater=maxLength(10)\r\nconst postForm = (props: any) => {\r\n    return (\r\n\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder={\"massages\"}\r\n                       component={Textarea}\r\n                       name={\"massages\"}\r\n                       validate={[requiredField, maxLenghtCreater]}\r\n                />\r\n            </div>\r\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n                Add\r\n            </Button>\r\n        </form>\r\n    )\r\n}\r\nconst PostReduxForm = reduxForm({\r\n    form: 'post'\r\n})(postForm)\r\n","import React from 'react';\r\nimport {DispatchTypePosts, MyPosts, StateTypePosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {addPostAC, deletePostAC} from \"../../../../BLL/Reducers/profile-reducer\";\r\nimport {StoreStateType} from \"../../../../BLL/store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nlet mapSttateToprops = (state: StoreStateType): StateTypePosts => {\r\n    return {\r\n        posts: state.profile.postsDataArray\r\n\r\n    }\r\n}\r\n\r\nlet mapDispatchToToprops = (dispatch: Dispatch): DispatchTypePosts => {\r\n    return {\r\n        addpost: (massages: string) => {\r\n            dispatch(addPostAC(massages))\r\n        },\r\n        deletePost: (id: number) => {\r\n            dispatch(deletePostAC(id))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const MyPostsContainer = connect(mapSttateToprops, mapDispatchToToprops)(MyPosts);\r\n\r\n","import React from 'react';\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPost/MyPostsContainer\";\r\n\r\n\r\ntype ProfileType = {\r\n    profile: any\r\n    status: any\r\n    updateStatus: any\r\n    ownerId: any\r\n    updatePhoto: any\r\n    updateInfoProfile: any\r\n}\r\n\r\nexport const Profile = (props: ProfileType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         ownerId={props.ownerId}\r\n                         updatePhoto={props.updatePhoto}\r\n                         updateInfoProfile={props.updateInfoProfile}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n\r\n    )\r\n}","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getOneProfileTC,\r\n    getStatusTC,\r\n    updatePhotoTC, updateInfoProfileTC,\r\n    updateStatusTC\r\n} from \"../../../BLL/Reducers/profile-reducer\";\r\nimport {StoreStateType} from \"../../../BLL/store\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\n class ProfileConteiner extends React.Component<any, any>{\r\n// match из  withRouter  взялся\r\n     refreshProfile(){\r\n         let ownerId =this.props.match.params.userID\r\n         // если айди не найден, то задаем айди авторизированного пользователя\r\n         if (!ownerId){\r\n             ownerId=this.props.authorizationUserId\r\n             // если пользователь не авторизирован, то в айди ничего нет и мы редеректемся на страницу логина\r\n             if(!ownerId){\r\n                 this.props.history.push(\"/login\")\r\n             }\r\n         }\r\n         this.props.getOneProfile(ownerId)\r\n         this.props.getStatus(ownerId)\r\n     }\r\n\r\n     componentDidMount() {\r\n\r\n       this.refreshProfile()\r\n     }\r\n     componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any) {\r\n         if(this.props.match.params.userID !==prevProps.match.params.userID )\r\n        this.refreshProfile()\r\n     }\r\n\r\n     render(){\r\n        return(\r\n            <Profile profile={this.props.profile}\r\n                     ownerId={!this.props.match.params.userID}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     updatePhoto={this.props.updatePhoto}\r\n                     updateInfoProfile={this.props.updateInfoProfile}/>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nlet mapStateToprops=(state:StoreStateType):any=>{\r\n    return{\r\n        profile: state.profile.profile,\r\n        status: state.profile.status,\r\n        authorizationUserId: state.auth.userId,\r\n        isAuthorization: state.auth.isAuthorization\r\n\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: any)  => {\r\n    return {\r\n        getOneProfile: (id: number) => {\r\n            dispatch(getOneProfileTC(id))\r\n        },\r\n        getStatus: (id: number) => {\r\n            dispatch(getStatusTC(id))\r\n        },updateStatus: (status: string) => {\r\n            dispatch(updateStatusTC(status))\r\n        },updatePhoto: (file: any) => {\r\n            dispatch(updatePhotoTC(file))\r\n        },\r\n        updateInfoProfile: (profile: any) => {\r\n            dispatch(updateInfoProfileTC(profile))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n const ProfileConteinerConnect:any= compose(\r\n    connect (mapStateToprops,{\r\n        getOneProfile:getOneProfileTC,\r\n        getStatus:getStatusTC,\r\n        updateStatus: updateStatusTC,\r\n        updatePhoto: updatePhotoTC,\r\n        updateInfoProfile: updateInfoProfileTC\r\n    })\r\n    ,withRouter\r\n)(ProfileConteiner)\r\nexport default ProfileConteinerConnect\r\n"],"sourceRoot":""}