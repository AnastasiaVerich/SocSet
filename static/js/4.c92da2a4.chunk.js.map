{"version":3,"sources":["ui-new/messages-page/messages.module.scss","UI/HOC/WithAuthRedirect.tsx","ui-new/messages-page/messages.tsx","ui-new/messages-page/messages-container.tsx"],"names":["module","exports","mapStateToPropsRedirect","state","isAuth","auth","isAuthorization","Users","props","users","map","element","to","id","className","s","user","avatar","ava","src","photos","small","no_image","main","name","userName","hasNewMessages","lastMessages","info","time","lastDialogActivityDate","newMessagesCount","countUnread","MessagesWithOneUser","messageBody","document","querySelector","scrollTop","scrollHeight","clientHeight","useState","page","setPage","console","log","messages","length","chatField","totalCount","onClick","selectedDialogMessages","recipientId","field","authorizationUserId","senderId","my","sms","body","friend","maxLengthCreator","maxLength","SendMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","sendField","Field","placeholder","component","Textarea","validate","requiredField","printMess","type","sendMess","MessagesContainer","compose","connect","dialog","userId","profile","dispatch","currentPages","pagesize","getSelectedDialogTC","sendMessage","text","senMessageTC","usersTalkedWith","getUsersTalkedWithTC","getOneProfile","getOneProfileTC","Component","match","params","userID","useEffect","t","date","Date","getMonth","Number","substr","getDate","getFullYear","block","container","chats","butMenu","d1","d2","d3","search","selectedChat","undefined","userSelected","name2","fullName","chat","Preloader","values","massages"],"mappings":"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","file":"static/js/4.c92da2a4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"messages_block__2BgDr\",\"container\":\"messages_container__3wtWU\",\"chats\":\"messages_chats__1qTWs\",\"butMenu\":\"messages_butMenu__3bt7Y\",\"d1\":\"messages_d1__2z8bh\",\"d2\":\"messages_d2__1evek\",\"d3\":\"messages_d3__15QqN\",\"search\":\"messages_search__3au1X\",\"inp\":\"messages_inp__2V5mF\",\"users\":\"messages_users__2To5w\",\"user\":\"messages_user__1eDGh\",\"avatar\":\"messages_avatar__1IQfP\",\"ava\":\"messages_ava__2qNXj\",\"main\":\"messages_main__2ed33\",\"name\":\"messages_name__N0YZW\",\"lastMessages\":\"messages_lastMessages__3TugM\",\"info\":\"messages_info__3aL2H\",\"time\":\"messages_time__3yMbe\",\"countUnread\":\"messages_countUnread__3CUhV\",\"selectedChat\":\"messages_selectedChat__2_1DR\",\"userSelected\":\"messages_userSelected__3cjfw\",\"name2\":\"messages_name2__2gHrL\",\"chat\":\"messages_chat__CLO-h\",\"chatField\":\"messages_chatField__2z2Ek\",\"field\":\"messages_field__1z_ku\",\"my\":\"messages_my__-ZnNF\",\"sms\":\"messages_sms__RW2JY\",\"friend\":\"messages_friend__1i25E\",\"sendField\":\"messages_sendField__1P0Gy\",\"printMess\":\"messages_printMess__1_zSd\",\"sendMess\":\"messages_sendMess__3PHwt\"};","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {StoreStateType} from \"../../BLL/store\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsRedirect = (state: StoreStateType): any => {\r\n    return {\r\n        isAuth: state.auth.isAuthorization\r\n    }\r\n}\r\n\r\n// хуки для переиспользования кода.\r\nexport const WithAuthRedirect = (Component: any) => {\r\n\r\n    const RedirectComponent = (props: any) => {\r\n        if (props.isAuth === false) return <Redirect to={\"/login\"}/>\r\n        return <Component {...props}/>\r\n    }\r\n    const ConnectRedirectComponent = connect(mapStateToPropsRedirect)(RedirectComponent)\r\n    return ConnectRedirectComponent;\r\n}","import React, {useEffect, useState} from 'react'\r\nimport s from \"./messages.module.scss\"\r\nimport {Preloader} from \"../Common/pr/Preloader\";\r\nimport {UsersTalkedWith} from \"../../UI/component/Dialog/UsersTalkedWith\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport no_image from \"../../UI/assets/img/no_image.png\";\r\nimport {AddMessagesReduxForm} from \"../../UI/component/Dialog/AddMessagesReduxForm\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLength, requiredField} from \"../../UI/utils/validators/validators\";\r\nimport {Textarea} from \"../Common/FormsControl/FormsControl\";\r\nimport {BiMessageError, FiRefreshCcw, FiSend, IoIosSearch} from \"react-icons/all\";\r\n\r\nexport const Messages = (props: any) => {\r\n    function populate() {\r\n        while (true) {\r\n            // нижняя граница документа\r\n            let windowRelativeBottom = document.documentElement.getBoundingClientRect().bottom;\r\n\r\n            // если пользователь прокрутил достаточно далеко (< 100px до конца)\r\n            if (windowRelativeBottom < document.documentElement.clientHeight + 100) {\r\n                // добавим больше данных\r\n                document.body.insertAdjacentHTML(\"beforeend\", `<p>Дата: ${new Date()}</p>`);\r\n            }\r\n        }\r\n    }\r\n\r\n    // от куда берется match???\r\n    let recipientId = props.match.params.userID\r\n\r\n\r\n    useEffect(() => {\r\n        if (recipientId) {\r\n\r\n            props.selectedDialogMessages(recipientId, 1, 20)\r\n            props.getOneProfile(recipientId)\r\n        }\r\n    }, [recipientId])\r\n    useEffect(() => {\r\n        props.usersTalkedWith()\r\n    }, [])\r\n\r\n\r\n    let sendMessage = (values: any) => {\r\n        //massages, потому что такое значение name у field, которое нам надо\r\n        props.sendMessage(recipientId, values.massages)\r\n    }\r\n\r\n\r\n    let fieldMessages = () => {\r\n        return recipientId !== undefined\r\n            ? props.messages != null\r\n                ? <MessagesWithOneUser messages={props.messages}\r\n                                       authorizationUserId={props.authorizationUserId}\r\n                                       recipientId={recipientId}\r\n                                       selectedDialogMessages={props.selectedDialogMessages}\r\n                                       totalCount={props.totalCount}/>\r\n                : <Preloader/>\r\n            : <div>Выбери диалог</div>\r\n    }\r\n    let fieldUsers = () => {\r\n        return props.users != null\r\n            ? <Users users={props.users} time={time}/>\r\n            : <div>нет диалогов</div>\r\n    }\r\n\r\n\r\n    let time = (t: any) => {\r\n        let date = new Date()\r\n        if (date.getMonth() == Number(t.substr(5, 2) - 1)\r\n            && date.getDate() == t.substr(8, 2)\r\n            && date.getFullYear() == t.substr(0, 4))\r\n            return t.substr(11, 5);\r\n        else return t.substr(5, 5)\r\n    }\r\n\r\n    return (\r\n        <div className={s.block}>\r\n            <div className={s.container}>\r\n                <div className={s.chats}>\r\n                    <div className={s.butMenu}>\r\n                        <div className={s.d1}></div>\r\n                        <div className={s.d2}></div>\r\n                        <div className={s.d3}></div>\r\n\r\n                    </div>\r\n                    <div className={s.search}>\r\n                        <NavLink to={'/messages/' + recipientId}>\r\n                            <div>\r\n                                <div onClick={() => props.usersTalkedWith()}><FiRefreshCcw/></div>\r\n                            </div>\r\n                        </NavLink>\r\n                    </div>\r\n\r\n                    <div className={s.users}>\r\n                        {fieldUsers()}\r\n                    </div>\r\n                </div>\r\n                <div className={s.selectedChat}>\r\n                    {props.profile != null && recipientId !== undefined\r\n                        ?\r\n                        <div className={s.userSelected}>\r\n                            <div className={s.name2}>{props.profile.fullName}</div>\r\n                        </div>\r\n                        : <></>\r\n                    }\r\n                    <div className={s.chat}>\r\n                        {fieldMessages()}\r\n                        <SendMessageReduxForm onSubmit={sendMessage}/>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Users = (props: any) => {\r\n\r\n    return (\r\n        <>\r\n            {props.users.map((element: any) =>\r\n                <NavLink to={'/messages/' + element.id} key={element.id} className={s.user}>\r\n                    <div className={s.avatar}>\r\n                        <img className={s.ava}\r\n                             src={element.photos.small != null\r\n                                 ? element.photos.small\r\n                                 : no_image}/>\r\n                    </div>\r\n                    <div className={s.main}>\r\n                        <div className={s.name}>{element.userName}</div>\r\n                        {element.hasNewMessages && <div className={s.lastMessages}>New messages!</div>}\r\n                    </div>\r\n                    <div className={s.info}>\r\n                        <div className={s.time}>{props.time(element.lastDialogActivityDate)}</div>\r\n                        {element.newMessagesCount !== 0 &&\r\n                        <div className={s.countUnread}>{element.newMessagesCount}</div>}\r\n\r\n                    </div>\r\n                </NavLink>)\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nconst MessagesWithOneUser = (props: any) => {\r\n\r\n    var messageBody = document.querySelector('#messageBody');\r\n\r\n    if(messageBody!==null) {\r\n        messageBody.scrollTop = messageBody.scrollHeight - messageBody.clientHeight;\r\n    }\r\n\r\n    let [page, setPage] = useState(2)\r\n    console.log(props.messages.length)\r\n    return (<div className={s.chatField} id=\"messageBody\">\r\n            {props.totalCount > props.messages.length\r\n                ? <button onClick={() => {\r\n                    props.selectedDialogMessages(props.recipientId, page, 20);\r\n                    setPage(++page)\r\n                }}>++</button>\r\n                : <></>}\r\n\r\n            {props.messages.map((element: any) =>\r\n                <div key={element.id} className={s.field}>\r\n                    {props.authorizationUserId === element.senderId\r\n                        ?\r\n                        <div className={s.my}><p className={s.sms}>{element.body}</p></div>\r\n                        :\r\n                        <div className={s.friend}><p className={s.sms}>{element.body}</p>\r\n                        </div>}\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst maxLengthCreator = maxLength(10)\r\n\r\nconst SendMessageForm = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={s.sendField}>\r\n            <Field placeholder=\"Enter sms\"\r\n                   component={Textarea}\r\n                   name={\"massages\"}\r\n                   validate={[requiredField, maxLengthCreator]}\r\n                   props={{className: s.printMess}}\r\n            />\r\n            <button type='submit' className={s.sendMess}><FiSend/></button>\r\n        </form>\r\n    )\r\n}\r\nexport const SendMessageReduxForm = reduxForm({\r\n    form: \"dialog\"\r\n})(SendMessageForm)","\r\nimport React from \"react\";\r\nimport {StoreStateType} from \"../../BLL/store\";\r\nimport {DispatchTypeDialog, StateTypeDialog} from \"../../UI/component/Dialog/Dialog\";\r\nimport {getSelectedDialogTC, getUsersTalkedWithTC, senMessageTC} from \"../../BLL/Reducers/dialogs-reducer\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {WithAuthRedirect} from \"../../UI/HOC/WithAuthRedirect\";\r\nimport {Messages} from \"./messages\";\r\nimport {getOneProfileTC} from \"../../BLL/Reducers/profile-reducer\";\r\n\r\nlet mapStateToProps = (state: StoreStateType) => {\r\n    return {\r\n        messages: state.dialog.messages,\r\n        authorizationUserId: state.auth.userId,\r\n        users: state.dialog.users,\r\n        profile: state.profile.profile,\r\n        totalCount: state.dialog.totalCount\r\n\r\n\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: any)  => {\r\n    return {\r\n        selectedDialogMessages: (id: number, currentPages: any, pagesize: any) => {\r\n            dispatch(getSelectedDialogTC(id, currentPages,pagesize))\r\n        },\r\n        sendMessage: (id: number, text: string) => {\r\n            dispatch(senMessageTC(id, text))\r\n        },\r\n        usersTalkedWith: () => {\r\n            dispatch(getUsersTalkedWithTC())\r\n        }, getOneProfile: (id: number) => {\r\n            dispatch(getOneProfileTC(id))\r\n        },\r\n    }\r\n}\r\nconst MessagesContainer: any = compose(connect(mapStateToProps, mapDispatchToProps), WithAuthRedirect)(Messages)\r\nexport default MessagesContainer"],"sourceRoot":""}