{"version":3,"sources":["UI/component/Profile/ProfileInfo/ProfileInfo.module.css","UI/component/Profile/Profile.module.css","UI/component/Profile/ProfileInfo/any/Status/ProfileStatusHOC.tsx","UI/component/Profile/ProfileInfo/any/UserInfoEdit.tsx","UI/component/Profile/ProfileInfo/any/Contact.tsx","UI/component/Profile/ProfileInfo/any/UserInfo.tsx","UI/component/Profile/ProfileInfo/ProfileInfo.tsx","UI/component/Profile/Profile.tsx","UI/component/Profile/ProfoleConteiner.tsx"],"names":["module","exports","ProfileStatusHOC","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","target","value","UserInfoEditForm","reduxForm","form","handleSubmit","profile","error","console","log","onSubmit","className","style","formSunnierError","createFormField","Input","type","Textarea","Object","keys","contacts","map","key","Contact","contactTitle","contactValue","UserInfo","ownerId","Button","variant","color","onClick","goToEditeMode","ProfileInfo","Preloader","container","upContainer","photoBlock","photos","large","photo","src","no_image","htmlFor","customfileupload","files","length","updatePhoto","inputFile","id","to","userId","activeClassName","c","act","mainInfoBlock","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","downContainer","contactsBlock","formData","updateInfoProfile","then","initialValues","Profile","block","ProfileConteiner","this","match","params","userID","authorizationUserId","history","push","getOneProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","React","Component","ProfileConteinerConnect","compose","connect","state","auth","isAuthorization","getOneProfileTC","getStatusTC","updateStatusTC","updatePhotoTC","updateInfoProfileTC","withRouter"],"mappings":"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","file":"static/js/4.5a4872e0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"photo\":\"ProfileInfo_photo__34hd_\",\"container\":\"ProfileInfo_container__1Hmme\",\"upContainer\":\"ProfileInfo_upContainer__1C3Dx\",\"photoBlock\":\"ProfileInfo_photoBlock__3ong-\",\"mainInfoBlock\":\"ProfileInfo_mainInfoBlock__3AzBv\",\"downContainer\":\"ProfileInfo_downContainer__QH7k0\",\"inputFile\":\"ProfileInfo_inputFile__1osS5\",\"customfileupload\":\"ProfileInfo_customfileupload__oW8Na\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Profile_block__3LxMd\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n//статус в виде функциональной  компоненты\r\nexport const ProfileStatusHOC = (props: any) => {\r\n    let[editMode, setEditMode]=useState(false)\r\n    let[status, setStatus]=useState(props.status)\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n\r\n    const activateEditMode=()=>{\r\n        setEditMode(true)\r\n    }\r\n\r\n   const offEditMode = () => {\r\n       setEditMode(false)\r\n       props.updateStatus(status)\r\n    }\r\n    const onStatusChange=(e:ChangeEvent<HTMLInputElement>)=>{\r\n        setStatus( e.target.value)\r\n    }\r\n\r\n    return <>\r\n        <b>Статус: </b>\r\n        {!editMode &&\r\n            <span onDoubleClick={activateEditMode}>{props.status || \"-----\"}</span>\r\n        }\r\n        {editMode &&\r\n            <input autoFocus={true}\r\n                   onBlur={offEditMode}\r\n                   onChange={onStatusChange}\r\n            value={status}/>\r\n        }\r\n    </>\r\n}\r\n","import React from \"react\";\r\nimport {createFormField, Input, Textarea} from \"../../../Common/FormsControl/FormsControl\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport style from \"../../../Common/FormsControl/forms.module.css\";\r\n\r\nexport const UserInfoEdit=({handleSubmit, profile, error}: any)=>{\r\n    console.log(profile)\r\n    return(\r\n        <form onSubmit={handleSubmit}>\r\n            {error && <div className={style.formSunnierError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <b>FullName: </b> {createFormField(\"Full name\", \"fullName\", [], Input)}\r\n            </div>\r\n\r\n            <div>\r\n                <b>looking for a job: </b>{createFormField(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}\r\n            </div>\r\n\r\n            <div>\r\n                <b>I can: </b>\r\n                {createFormField(\"skils\", \"lookingForAJobDescription\", [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>About me: </b>\r\n                {createFormField(\"About me\", \"aboutMe\", [], Textarea)}\r\n\r\n            </div>\r\n            <div>\r\n                <b>Contacts: {Object.keys(profile.contacts).map(key=>{\r\n                    return <div key={key}>\r\n                        <b>{key}: {createFormField(key, \"contacts.\"+key, [], Input)}</b>\r\n                    </div>\r\n                    }\r\n                )}</b>\r\n            </div>\r\n            <button>save</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const UserInfoEditForm: any = reduxForm({ form: 'editProfile'})(UserInfoEdit)\r\n\r\n\r\n","import React from \"react\";\r\n\r\nexport const Contact = (props: any) => {\r\n    return (\r\n        <div><b>{props.contactTitle}: </b>{props.contactValue}</div>\r\n    )\r\n}","import {Button} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {Contact} from \"./Contact\";\r\n\r\nexport const UserInfo = (props: any) => {\r\n    return (\r\n        <div>\r\n           {/* <div>\r\n                <h2><b>FullName: </b>{props.profile.fullName}</h2>\r\n            </div>\r\n\r\n            <div>\r\n                <b>looking for a job: </b>{props.profile.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {props.profile.lookingForAJobDescription &&\r\n            <div>\r\n                <b>I can: </b>{props.profile.lookingForAJobDescription}\r\n            </div>}\r\n            <div>\r\n                <b>About me: </b>{props.profile.aboutMe}\r\n            </div>*/}\r\n            <div>\r\n                <b>Contacts: </b>{Object.keys(props.profile.contacts).map(key => {\r\n                return <Contact key={key} contactTitle={key} contactValue={props.profile.contacts[key]}/>\r\n            })}\r\n            </div>\r\n            {props.ownerId &&\r\n            <Button variant=\"contained\" color=\"primary\" onClick={props.goToEditeMode}>edit Data</Button>}\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport {Preloader} from \"../../Common/Preloader/Preloader\";\r\nimport {ProfileStatusHOC} from \"./any/Status/ProfileStatusHOC\";\r\nimport no_image from \"../../../assets/img/no_image.png\"\r\nimport {UserInfoEditForm} from \"./any/UserInfoEdit\";\r\nimport {Button, Grid, Input} from \"@material-ui/core\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport c from \"../../Nav/Nav.module.css\";\r\nimport {UserInfo} from \"./any/UserInfo\";\r\nimport {ProfileStatus} from \"./any/Status/ProfileStatus\";\r\nimport style from \"./ProfileInfo.module.css\"\r\n\r\ntype ProfileInfoType = {\r\n    profile: any\r\n    status: any\r\n    updateStatus: any\r\n    ownerId: any\r\n    updatePhoto: any\r\n    updateInfoProfile: any\r\n}\r\n\r\nexport const ProfileInfo = (props: ProfileInfoType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n// пока профайл не пришел с сервера, показываем загрузку страницы\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const updatePhoto = (e: any/*: ChangeEvent<HTMLInputElement>*/) => {\r\n        if (e.target.files.length) {\r\n            props.updatePhoto(e.target.files[0])\r\n        }\r\n    }\r\n//отправка данных с формы на сервер через санку. когда данные отправились, то меняемм  режим редактирования\r\n    const onSubmit = (formData: any) => {\r\n        props.updateInfoProfile(formData)\r\n            .then(() => {\r\n                setEditMode(false);\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div className={style.container}>\r\n            <div className={style.upContainer} >\r\n                <div className={style.photoBlock}>\r\n                    {props.profile.photos.large === null\r\n                        ? <img className={style.photo} src={no_image}/>\r\n                        : <img className={style.photo} src={props.profile.photos.large}/>}\r\n\r\n                    {/*если мы на странице владельца то показываем изменение фото*/}\r\n                    <div>\r\n                        {props.ownerId && <div>\r\n                            <label htmlFor=\"file-upload\" className={style.customfileupload} onChange={updatePhoto}>\r\n                                <input className={style.inputFile} id=\"file-upload\" type=\"file\"/>\r\n                                Custom Upload\r\n                            </label>\r\n\r\n                        </div>}\r\n                    </div>\r\n                    <div>\r\n                        {/*если на странице НЕТ владельца, то показываем возможность начать диалог*/}\r\n                        {!props.ownerId &&\r\n                        <NavLink to={'/dialogs/' + props.profile.userId} activeClassName={c.act}>\r\n                            <Button variant=\"contained\" color=\"primary\">Start dialog</Button>\r\n                        </NavLink>}\r\n                    </div>\r\n                </div>\r\n                <div className={style.mainInfoBlock}>\r\n                    <div>\r\n                        <h2><b>FullName: </b>{props.profile.fullName}</h2>\r\n                    </div>\r\n                    <div>\r\n                        <b>looking for a job: </b>{props.profile.lookingForAJob ? \"yes\" : \"no\"}\r\n                    </div>\r\n                    {props.profile.lookingForAJobDescription &&\r\n                    <div>\r\n                        <b>I can: </b>{props.profile.lookingForAJobDescription}\r\n                    </div>}\r\n                    <div>\r\n                        <b>About me: </b>{props.profile.aboutMe}\r\n                    </div>\r\n                    {/*разные виды профайла*/}\r\n                    <ProfileStatusHOC status={props.status} updateStatus={props.updateStatus}/>\r\n                    {/*<ProfileStatus status={props.status} updateStatus={props.updateStatus}/>*/}\r\n                </div>\r\n            </div>\r\n            <div className={style.downContainer}>\r\n                {/* Информация о пользователе */}\r\n                <div className={style.contactsBlock}>\r\n                    {editMode\r\n                        ? <UserInfoEditForm onSubmit={onSubmit} initialValues={props.profile} profile={props.profile}/>\r\n                        : <UserInfo profile={props.profile} ownerId={props.ownerId} goToEditeMode={() => {\r\n                            setEditMode(true)\r\n                        }}/>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>)\r\n}","import React from 'react';\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPost/MyPostsContainer\";\r\nimport style from \"./Profile.module.css\"\r\n\r\n\r\ntype ProfileType = {\r\n    profile: any\r\n    status: any\r\n    updateStatus: any\r\n    ownerId: any\r\n    updatePhoto: any\r\n    updateInfoProfile: any\r\n}\r\n\r\nexport const Profile = (props: ProfileType) => {\r\n    return (\r\n        <div className={style.block}>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         ownerId={props.ownerId}\r\n                         updatePhoto={props.updatePhoto}\r\n                         updateInfoProfile={props.updateInfoProfile}/>\r\n          {/*  <MyPostsContainer/>*/}\r\n        </div>\r\n\r\n    )\r\n}","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getOneProfileTC,\r\n    getStatusTC,\r\n    updatePhotoTC, updateInfoProfileTC,\r\n    updateStatusTC\r\n} from \"../../../BLL/Reducers/profile-reducer\";\r\nimport {StoreStateType} from \"../../../BLL/store\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\n class ProfileConteiner extends React.Component<any, any>{\r\n// match из  withRouter  взялся\r\n     refreshProfile(){\r\n         let ownerId =this.props.match.params.userID\r\n         // если айди не найден, то задаем айди авторизированного пользователя\r\n         if (!ownerId){\r\n             ownerId=this.props.authorizationUserId\r\n             // если пользователь не авторизирован, то в айди ничего нет и мы редеректемся на страницу логина\r\n             if(!ownerId){\r\n                 this.props.history.push(\"/login\")\r\n             }\r\n         }\r\n         this.props.getOneProfile(ownerId)\r\n         this.props.getStatus(ownerId)\r\n     }\r\n\r\n     componentDidMount() {\r\n\r\n       this.refreshProfile()\r\n     }\r\n     componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any) {\r\n         if(this.props.match.params.userID !==prevProps.match.params.userID )\r\n        this.refreshProfile()\r\n     }\r\n\r\n     render(){\r\n        return(\r\n            <Profile profile={this.props.profile}\r\n                     ownerId={!this.props.match.params.userID}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     updatePhoto={this.props.updatePhoto}\r\n                     updateInfoProfile={this.props.updateInfoProfile}/>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nlet mapStateToprops=(state:StoreStateType):any=>{\r\n    return{\r\n        profile: state.profile.profile,\r\n        status: state.profile.status,\r\n        authorizationUserId: state.auth.userId,\r\n        isAuthorization: state.auth.isAuthorization\r\n\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: any)  => {\r\n    return {\r\n        getOneProfile: (id: number) => {\r\n            dispatch(getOneProfileTC(id))\r\n        },\r\n        getStatus: (id: number) => {\r\n            dispatch(getStatusTC(id))\r\n        },updateStatus: (status: string) => {\r\n            dispatch(updateStatusTC(status))\r\n        },updatePhoto: (file: any) => {\r\n            dispatch(updatePhotoTC(file))\r\n        },\r\n        updateInfoProfile: (profile: any) => {\r\n            dispatch(updateInfoProfileTC(profile))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n const ProfileConteinerConnect:any= compose(\r\n    connect (mapStateToprops,{\r\n        getOneProfile:getOneProfileTC,\r\n        getStatus:getStatusTC,\r\n        updateStatus: updateStatusTC,\r\n        updatePhoto: updatePhotoTC,\r\n        updateInfoProfile: updateInfoProfileTC\r\n    })\r\n    ,withRouter\r\n)(ProfileConteiner)\r\nexport default ProfileConteinerConnect\r\n"],"sourceRoot":""}