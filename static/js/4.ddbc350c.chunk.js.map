{"version":3,"sources":["UI/component/Profile/ProfileInfo/ProfileInfo.module.css","UI/component/Profile/Profile.module.css","UI/component/Profile/ProfileInfo/any/Status/ProfileStatusHOC.tsx","UI/component/Profile/ProfileInfo/ProfileInfo.tsx","UI/component/Profile/Profile.tsx","UI/component/Profile/ProfoleConteiner.tsx"],"names":["module","exports","ProfileStatusHOC","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","target","value","ProfileInfo","profile","Preloader","className","style","container","firstBlock","width100","divPhoto","photos","large","photo","src","no_image","ownerId","htmlFor","customfileupload","files","length","updatePhoto","inputFile","id","type","to","userId","activeClassName","c","act","info","infoItem","lookingForAJob","lookingForAJobDescription","secondBlock","fullName","links","title","contacts","UserInfoEditForm2","onSubmit","formData","updateInfoProfile","then","initialValues","goToEditeMode","endBlock","aboutMe","UserInfo2","titleContact","userInfoBlock","Object","keys","map","key","contactTitle","contactValue","Button","variant","color","onClick","Contact2","oneInfoContainer","reduxForm","form","handleSubmit","error","formContainer","formSunnierError","createFormField","Input","Textarea","Profile","block","ProfileConteiner","this","match","params","userID","authorizationUserId","history","push","getOneProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","React","Component","ProfileConteinerConnect","compose","connect","state","auth","isAuthorization","getOneProfileTC","getStatusTC","updateStatusTC","updatePhotoTC","updateInfoProfileTC","withRouter"],"mappings":"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","file":"static/js/4.ddbc350c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ProfileInfo_container__1Hmme\",\"firstBlock\":\"ProfileInfo_firstBlock__2Hta7\",\"width100\":\"ProfileInfo_width100__3rQkg\",\"divPhoto\":\"ProfileInfo_divPhoto__3g2Ri\",\"photo\":\"ProfileInfo_photo__34hd_\",\"inputFile\":\"ProfileInfo_inputFile__1osS5\",\"customfileupload\":\"ProfileInfo_customfileupload__oW8Na\",\"info\":\"ProfileInfo_info__eDfC1\",\"infoItem\":\"ProfileInfo_infoItem__21TQH\",\"secondBlock\":\"ProfileInfo_secondBlock__3jdxd\",\"fullName\":\"ProfileInfo_fullName__1uuKx\",\"links\":\"ProfileInfo_links__2H22O\",\"title\":\"ProfileInfo_title__2eCqI\",\"contacts\":\"ProfileInfo_contacts__3VRDs\",\"titleContact\":\"ProfileInfo_titleContact__3cfkb\",\"userInfoBlock\":\"ProfileInfo_userInfoBlock__2iUUK\",\"oneInfoContainer\":\"ProfileInfo_oneInfoContainer__3Jtdu\",\"endBlock\":\"ProfileInfo_endBlock__3oGuX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Profile_block__3LxMd\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n//статус в виде функциональной  компоненты\r\nexport const ProfileStatusHOC = (props: any) => {\r\n    let[editMode, setEditMode]=useState(false)\r\n    let[status, setStatus]=useState(props.status)\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n\r\n    const activateEditMode=()=>{\r\n        setEditMode(true)\r\n    }\r\n\r\n   const offEditMode = () => {\r\n       setEditMode(false)\r\n       props.updateStatus(status)\r\n    }\r\n    const onStatusChange=(e:ChangeEvent<HTMLInputElement>)=>{\r\n        setStatus( e.target.value)\r\n    }\r\n\r\n    return <>\r\n        <b>Статус: </b>\r\n        {!editMode &&\r\n            <span onDoubleClick={activateEditMode}>{props.status || \"-----\"}</span>\r\n        }\r\n        {editMode &&\r\n            <input autoFocus={true}\r\n                   onBlur={offEditMode}\r\n                   onChange={onStatusChange}\r\n            value={status}/>\r\n        }\r\n    </>\r\n}\r\n","import React, {useState} from 'react';\r\nimport {Preloader} from \"../../Common/Preloader/Preloader\";\r\nimport {ProfileStatusHOC} from \"./any/Status/ProfileStatusHOC\";\r\nimport no_image from \"../../../assets/img/no_image.png\"\r\nimport {UserInfoEditForm} from \"./any/UserInfoEdit\";\r\nimport {Button, Grid, Input} from \"@material-ui/core\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport c from \"../../Nav/Nav.module.css\";\r\nimport {UserInfo} from \"./any/UserInfo\";\r\nimport {ProfileStatus} from \"./any/Status/ProfileStatus\";\r\nimport style from \"./ProfileInfo.module.css\"\r\nimport {Contact} from \"./any/Contact\";\r\nimport {createFormField, Textarea} from \"../../Common/FormsControl/FormsControl\";\r\nimport {reduxForm} from \"redux-form\";\r\n\r\ntype ProfileInfoType = {\r\n    profile: any\r\n    status: any\r\n    updateStatus: any\r\n    ownerId: any\r\n    updatePhoto: any\r\n    updateInfoProfile: any\r\n}\r\n\r\nexport const ProfileInfo = (props: ProfileInfoType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n// пока профайл не пришел с сервера, показываем загрузку страницы\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const updatePhoto = (e: any/*: ChangeEvent<HTMLInputElement>*/) => {\r\n        if (e.target.files.length) {\r\n            props.updatePhoto(e.target.files[0])\r\n        }\r\n    }\r\n//отправка данных с формы на сервер через санку. когда данные отправились, то меняемм  режим редактирования\r\n    const onSubmit = (formData: any) => {\r\n        props.updateInfoProfile(formData)\r\n            .then(() => {\r\n                setEditMode(false);\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div className={style.container}>\r\n            <div className={style.firstBlock}>\r\n                <div className={style.width100}>\r\n                    <div className={style.divPhoto}/>\r\n                    {props.profile.photos.large === null\r\n                        ? <img className={style.photo} src={no_image}/>\r\n                        : <img className={style.photo} src={props.profile.photos.large}/>}\r\n                </div>\r\n                <div>\r\n                    {/*если мы на странице владельца то показываем изменение фото*/}\r\n                    {props.ownerId && <div>\r\n                        <label htmlFor=\"file-upload\" className={style.customfileupload} onChange={updatePhoto}>\r\n                            <input className={style.inputFile} id=\"file-upload\" type=\"file\"/>\r\n                            Custom Upload\r\n                        </label>\r\n                    </div>}\r\n                    {/*если на странице НЕ владельца, то показываем возможность начать диалог*/}\r\n                    {!props.ownerId &&\r\n                    <NavLink to={'/dialogs/' + props.profile.userId} activeClassName={c.act}>\r\n                        <div className={style.customfileupload}>Start dialog</div>\r\n                    </NavLink>}\r\n                </div>\r\n                <div className={style.info}>\r\n                    <div className={style.infoItem}>\r\n                        <b>looking for a job: </b>{props.profile.lookingForAJob ? \"yes\" : \"no\"}\r\n                    </div>\r\n                    <div className={style.infoItem}>\r\n                        <b>I can: </b>{props.profile.lookingForAJobDescription}\r\n                    </div>\r\n                    <div className={style.infoItem}>\r\n                        <ProfileStatusHOC status={props.status} updateStatus={props.updateStatus}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={style.secondBlock}>\r\n                <div className={style.fullName}>\r\n                    <h2><b>{props.profile.fullName}</b></h2>\r\n                </div>\r\n                <div className={style.links}>\r\n                    <div className={style.title}> Contacts( через пропсы в отд комп) или один ситиль</div>\r\n                    <div className={style.contacts}>\r\n                        {editMode\r\n                            ? <UserInfoEditForm2 onSubmit={onSubmit} initialValues={props.profile}\r\n                                                profile={props.profile}/>\r\n                            : <UserInfo2 profile={props.profile} ownerId={props.ownerId} goToEditeMode={() => {\r\n                                setEditMode(true)\r\n                            }}/>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={style.endBlock}>\r\n                <div className={style.title}> About me( как контакты)</div>\r\n                <div className={style.aboutMe}>\r\n                    <b>About me: </b>{props.profile.aboutMe}\r\n                </div>\r\n            </div>\r\n        </div>\r\n        // <div className={style.container}>\r\n        //     <div className={style.photoBlock}>\r\n        //         {props.profile.photos.large === null\r\n        //             ? <img className={style.photo} src={no_image}/>\r\n        //             : <img className={style.photo} src={props.profile.photos.large}/>}\r\n        //\r\n        //         {/*если мы на странице владельца то показываем изменение фото*/}\r\n        //         <div>\r\n        //             {props.ownerId && <div>\r\n        //                 <label htmlFor=\"file-upload\" className={style.customfileupload} onChange={updatePhoto}>\r\n        //                     <input className={style.inputFile} id=\"file-upload\" type=\"file\"/>\r\n        //                     Custom Upload\r\n        //                 </label>\r\n        //\r\n        //             </div>}\r\n        //         </div>\r\n        //         <div>\r\n        //             {/*если на странице НЕТ владельца, то показываем возможность начать диалог*/}\r\n        //             {!props.ownerId &&\r\n        //             <NavLink to={'/dialogs/' + props.profile.userId} activeClassName={c.act}>\r\n        //                 <Button variant=\"contained\" color=\"primary\">Start dialog</Button>\r\n        //             </NavLink>}\r\n        //         </div>\r\n        //     </div>\r\n        //     <div className={style.mainInfoBlock}>\r\n        //         <div>\r\n        //             <h2><b>{props.profile.fullName}</b></h2>\r\n        //         </div>\r\n        //         <div>\r\n        //             <b>looking for a job: </b>{props.profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        //         </div>\r\n        //         {props.profile.lookingForAJobDescription &&\r\n        //         <div>\r\n        //             <b>I can: </b>{props.profile.lookingForAJobDescription}\r\n        //         </div>}\r\n        //         <div>\r\n        //             <b>About me: </b>{props.profile.aboutMe}\r\n        //         </div>\r\n        //         {/*разные виды профайла*/}\r\n        //         <ProfileStatusHOC status={props.status} updateStatus={props.updateStatus}/>\r\n        //         {/*<ProfileStatus status={props.status} updateStatus={props.updateStatus}/>*/}\r\n        //     </div>\r\n        //     {/* Информация о пользователе */}\r\n        //     <div className={style.contactsBlock}>\r\n        //         {editMode\r\n        //             ? <UserInfoEditForm onSubmit={onSubmit} initialValues={props.profile} profile={props.profile}/>\r\n        //             : <UserInfo2 profile={props.profile} ownerId={props.ownerId} goToEditeMode={() => {\r\n        //                 setEditMode(true)\r\n        //             }}/>\r\n        //         }\r\n        //     </div>\r\n        // </div>\r\n    )\r\n}\r\nconst UserInfo2 = (props: any) => {\r\n    return (\r\n        <>\r\n            <b className={style.titleContact}>Contacts: </b>\r\n            <div className={style.userInfoBlock}>\r\n\r\n                {Object.keys(props.profile.contacts).map(key => {\r\n                    return <Contact2 key={key} contactTitle={key} contactValue={props.profile.contacts[key]}/>\r\n                })}\r\n            </div>\r\n            {props.ownerId &&\r\n            <Button variant=\"contained\" color=\"primary\" onClick={props.goToEditeMode}>edit Data</Button>}\r\n        </>\r\n    )\r\n}\r\n\r\nconst Contact2 = (props: any) => {\r\n    return (\r\n        <div className={style.oneInfoContainer}><b>{props.contactTitle}: </b>{props.contactValue}</div>\r\n    )\r\n}\r\nconst UserInfoEdit=({handleSubmit, profile, error}: any)=>{\r\n    return(\r\n        <form onSubmit={handleSubmit} className={style.formContainer}>\r\n            {error && <div className={style.formSunnierError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <b>FullName: </b> {createFormField(\"Full name\", \"fullName\", [], Input)}\r\n            </div>\r\n\r\n            <div>\r\n                <b>looking for a job: </b>{createFormField(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}\r\n            </div>\r\n\r\n            <div>\r\n                <b>I can: </b>\r\n                {createFormField(\"skils\", \"lookingForAJobDescription\", [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>About me: </b>\r\n                {createFormField(\"About me\", \"aboutMe\", [], Textarea)}\r\n\r\n            </div>\r\n            <div>\r\n                <b>Contacts: {Object.keys(profile.contacts).map(key=>{\r\n                        return <div key={key}>\r\n                            <b>{key}: {createFormField(key, \"contacts.\"+key, [], Input)}</b>\r\n                        </div>\r\n                    }\r\n                )}</b>\r\n            </div>\r\n            <button>save</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const UserInfoEditForm2: any = reduxForm({ form: 'editProfile'})(UserInfoEdit)\r\n\r\n","import React from 'react';\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPost/MyPostsContainer\";\r\nimport style from \"./Profile.module.css\"\r\n\r\n\r\ntype ProfileType = {\r\n    profile: any\r\n    status: any\r\n    updateStatus: any\r\n    ownerId: any\r\n    updatePhoto: any\r\n    updateInfoProfile: any\r\n}\r\n\r\nexport const Profile = (props: ProfileType) => {\r\n    return (\r\n        <div className={style.block}>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         ownerId={props.ownerId}\r\n                         updatePhoto={props.updatePhoto}\r\n                         updateInfoProfile={props.updateInfoProfile}/>\r\n          {/*  <MyPostsContainer/>*/}\r\n        </div>\r\n\r\n    )\r\n}","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getOneProfileTC,\r\n    getStatusTC,\r\n    updatePhotoTC, updateInfoProfileTC,\r\n    updateStatusTC\r\n} from \"../../../BLL/Reducers/profile-reducer\";\r\nimport {StoreStateType} from \"../../../BLL/store\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\n class ProfileConteiner extends React.Component<any, any>{\r\n// match из  withRouter  взялся\r\n     refreshProfile(){\r\n         let ownerId =this.props.match.params.userID\r\n         // если айди не найден, то задаем айди авторизированного пользователя\r\n         if (!ownerId){\r\n             ownerId=this.props.authorizationUserId\r\n             // если пользователь не авторизирован, то в айди ничего нет и мы редеректемся на страницу логина\r\n             if(!ownerId){\r\n                 this.props.history.push(\"/login\")\r\n             }\r\n         }\r\n         this.props.getOneProfile(ownerId)\r\n         this.props.getStatus(ownerId)\r\n     }\r\n\r\n     componentDidMount() {\r\n\r\n       this.refreshProfile()\r\n     }\r\n     componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any) {\r\n         if(this.props.match.params.userID !==prevProps.match.params.userID )\r\n        this.refreshProfile()\r\n     }\r\n\r\n     render(){\r\n        return(\r\n            <Profile profile={this.props.profile}\r\n                     ownerId={!this.props.match.params.userID}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     updatePhoto={this.props.updatePhoto}\r\n                     updateInfoProfile={this.props.updateInfoProfile}/>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nlet mapStateToprops=(state:StoreStateType):any=>{\r\n    return{\r\n        profile: state.profile.profile,\r\n        status: state.profile.status,\r\n        authorizationUserId: state.auth.userId,\r\n        isAuthorization: state.auth.isAuthorization\r\n\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: any)  => {\r\n    return {\r\n        getOneProfile: (id: number) => {\r\n            dispatch(getOneProfileTC(id))\r\n        },\r\n        getStatus: (id: number) => {\r\n            dispatch(getStatusTC(id))\r\n        },updateStatus: (status: string) => {\r\n            dispatch(updateStatusTC(status))\r\n        },updatePhoto: (file: any) => {\r\n            dispatch(updatePhotoTC(file))\r\n        },\r\n        updateInfoProfile: (profile: any) => {\r\n            dispatch(updateInfoProfileTC(profile))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n const ProfileConteinerConnect:any= compose(\r\n    connect (mapStateToprops,{\r\n        getOneProfile:getOneProfileTC,\r\n        getStatus:getStatusTC,\r\n        updateStatus: updateStatusTC,\r\n        updatePhoto: updatePhotoTC,\r\n        updateInfoProfile: updateInfoProfileTC\r\n    })\r\n    ,withRouter\r\n)(ProfileConteiner)\r\nexport default ProfileConteinerConnect\r\n"],"sourceRoot":""}