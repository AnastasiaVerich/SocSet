{"version":3,"sources":["ui-new/messages-page/messages.module.scss","UI/HOC/WithAuthRedirect.tsx","ui-new/messages-page/messages.tsx","ui-new/messages-page/messages-container.tsx"],"names":["module","exports","mapStateToPropsRedirect","state","isAuth","auth","isAuthorization","Users","props","users","map","element","to","id","className","s","user","avatar","ava","src","photos","small","no_image","main","name","userName","lastMessages","info","time","countUnread","MessagesWithOneUser","chatField","messages","field","authorizationUserId","senderId","my","sms","body","friend","maxLengthCreator","maxLength","SendMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","sendField","Field","placeholder","component","Textarea","validate","requiredField","printMess","type","sendMess","MessagesContainer","compose","connect","dialog","userId","profile","dispatch","selectedDialogMessages","currentPages","pagesize","getSelectedDialogTC","sendMessage","text","senMessageTC","usersTalkedWith","getUsersTalkedWithTC","getOneProfile","getOneProfileTC","Component","recipientId","match","params","userID","useEffect","block","container","chats","butMenu","d1","d2","d3","search","inp","IconButton","onClick","serBut","selectedChat","undefined","userSelected","ava2","name2","fullName","chat","Preloader","values","massages"],"mappings":"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","file":"static/js/5.50e4da6c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"messages_block__2BgDr\",\"container\":\"messages_container__3wtWU\",\"chats\":\"messages_chats__1qTWs\",\"butMenu\":\"messages_butMenu__3bt7Y\",\"d1\":\"messages_d1__2z8bh\",\"d2\":\"messages_d2__1evek\",\"d3\":\"messages_d3__15QqN\",\"search\":\"messages_search__3au1X\",\"inp\":\"messages_inp__2V5mF\",\"users\":\"messages_users__2To5w\",\"user\":\"messages_user__1eDGh\",\"avatar\":\"messages_avatar__1IQfP\",\"ava\":\"messages_ava__2qNXj\",\"main\":\"messages_main__2ed33\",\"name\":\"messages_name__N0YZW\",\"lastMessages\":\"messages_lastMessages__3TugM\",\"info\":\"messages_info__3aL2H\",\"time\":\"messages_time__3yMbe\",\"countUnread\":\"messages_countUnread__3CUhV\",\"selectedChat\":\"messages_selectedChat__2_1DR\",\"userSelected\":\"messages_userSelected__3cjfw\",\"ava2\":\"messages_ava2__WeLbm\",\"name2\":\"messages_name2__2gHrL\",\"chat\":\"messages_chat__CLO-h\",\"chatField\":\"messages_chatField__2z2Ek\",\"field\":\"messages_field__1z_ku\",\"my\":\"messages_my__-ZnNF\",\"sms\":\"messages_sms__RW2JY\",\"friend\":\"messages_friend__1i25E\",\"sendField\":\"messages_sendField__1P0Gy\",\"printMess\":\"messages_printMess__1_zSd\",\"sendMess\":\"messages_sendMess__3PHwt\"};","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {StoreStateType} from \"../../BLL/store\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsRedirect = (state: StoreStateType): any => {\r\n    return {\r\n        isAuth: state.auth.isAuthorization\r\n    }\r\n}\r\n\r\n// хуки для переиспользования кода.\r\nexport const WithAuthRedirect = (Component: any) => {\r\n\r\n    const RedirectComponent = (props: any) => {\r\n        if (props.isAuth === false) return <Redirect to={\"/login\"}/>\r\n        return <Component {...props}/>\r\n    }\r\n    const ConnectRedirectComponent = connect(mapStateToPropsRedirect)(RedirectComponent)\r\n    return ConnectRedirectComponent;\r\n}","import React, {useEffect, useState} from 'react'\r\nimport s from \"./messages.module.scss\"\r\nimport {Preloader} from \"../Common/pr/Preloader\";\r\nimport {UsersTalkedWith} from \"../../UI/component/Dialog/UsersTalkedWith\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport no_image from \"../../UI/assets/img/no_image.png\";\r\nimport {AddMessagesReduxForm} from \"../../UI/component/Dialog/AddMessagesReduxForm\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLength, requiredField} from \"../../UI/utils/validators/validators\";\r\nimport {Textarea} from \"../Common/FormsControl/FormsControl\";\r\n\r\nexport const Messages = (props: any) => {\r\n\r\n    // от куда берется match???\r\n    let recipientId = props.match.params.userID\r\n\r\n\r\n    useEffect(() => {\r\n        if (recipientId) {\r\n\r\n            props.selectedDialogMessages(recipientId, 1, 20)\r\n            props.getOneProfile(recipientId)\r\n        }\r\n    }, [recipientId])\r\n    useEffect(() => {\r\n        props.usersTalkedWith()\r\n    }, [])\r\n\r\n\r\n    let sendMessage = (values: any) => {\r\n        //massages, потому что такое значение name у field, которое нам надо\r\n        props.sendMessage(recipientId, values.massages)\r\n    }\r\n\r\n\r\n    let fieldMessages = () => {\r\n        return recipientId !== undefined\r\n            ? props.messages != null\r\n                ? <MessagesWithOneUser messages={props.messages} authorizationUserId={props.authorizationUserId}/>\r\n                : <Preloader/>\r\n            : <div>Выбери диалог</div>\r\n    }\r\n    let fieldUsers = () => {\r\n        return props.users != null\r\n            ? <Users users={props.users}/>\r\n            : <div>нет диалогов</div>\r\n    }\r\n    return (\r\n        <div className={s.block}>\r\n            <div className={s.container}>\r\n                <div className={s.chats}>\r\n                    <div className={s.butMenu}>\r\n                        <div className={s.d1}></div>\r\n                        <div className={s.d2}></div>\r\n                        <div className={s.d3}></div>\r\n\r\n                    </div>\r\n                    <div className={s.search}>\r\n                        <input className={s.inp}></input>\r\n                        <NavLink to={'/messages/' + recipientId}>\r\n                            <div>\r\n                                <IconButton onClick={() => props.usersTalkedWith()}><RefreshIcon/></IconButton>\r\n                            </div>\r\n                        </NavLink>\r\n                        <div className={s.serBut}>+</div>\r\n\r\n                    </div>\r\n                    <div className={s.users}>\r\n                        {fieldUsers()}\r\n                    </div>\r\n                </div>\r\n                <div className={s.selectedChat}>\r\n                    {props.profile!= null && recipientId !== undefined\r\n                        ?\r\n                        <div className={s.userSelected}>\r\n                            <div className={s.ava2}></div>\r\n                            <div className={s.name2}>{props.profile.fullName}</div>\r\n                        </div>\r\n                        :<></>\r\n                    }\r\n                    <div className={s.chat}>\r\n                        {fieldMessages()}\r\n                        <SendMessageReduxForm onSubmit={sendMessage}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Users = (props: any) => {\r\n    return (\r\n        <>\r\n            {props.users.map((element: any) =>\r\n                <NavLink to={'/messages/' + element.id} key={element.id} className={s.user}>\r\n                    <div className={s.avatar}>\r\n                        <img className={s.ava}\r\n                             src={element.photos.small != null\r\n                                 ? element.photos.small\r\n                                 : no_image}/>\r\n                    </div>\r\n                    <div className={s.main}>\r\n                        <div className={s.name}>{element.userName}</div>\r\n                        <div className={s.lastMessages}>jhjkhkjh knkj...</div>\r\n                    </div>\r\n                    <div className={s.info}>\r\n                        <div className={s.time}>11:00</div>\r\n                        <div className={s.countUnread}>5</div>\r\n                    </div>\r\n                </NavLink>)\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nconst MessagesWithOneUser = (props: any) => {\r\n\r\n\r\n    return (<div className={s.chatField}>\r\n            {props.messages.map((element: any) =>\r\n                <div key={element.id} className={s.field}>\r\n                    {props.authorizationUserId === element.senderId\r\n                        ?\r\n                        <div className={s.my}><p className={s.sms}>{element.body}</p></div>\r\n                        :\r\n                        <div className={s.friend}><p className={s.sms}>{element.body}</p>\r\n                        </div>}\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst maxLengthCreator = maxLength(10)\r\n\r\nconst SendMessageForm = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={s.sendField}>\r\n            <Field placeholder=\"Enter sms\"\r\n                   component={Textarea}\r\n                   name={\"massages\"}\r\n                   validate={[requiredField, maxLengthCreator]}\r\n                   props={{className: s.printMess}}\r\n            />\r\n            <button type='submit' className={s.sendMess}>Send</button>\r\n        </form>\r\n    )\r\n}\r\nexport const SendMessageReduxForm = reduxForm({\r\n    form: \"dialog\"\r\n})(SendMessageForm)","\r\nimport React from \"react\";\r\nimport {StoreStateType} from \"../../BLL/store\";\r\nimport {DispatchTypeDialog, StateTypeDialog} from \"../../UI/component/Dialog/Dialog\";\r\nimport {getSelectedDialogTC, getUsersTalkedWithTC, senMessageTC} from \"../../BLL/Reducers/dialogs-reducer\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {WithAuthRedirect} from \"../../UI/HOC/WithAuthRedirect\";\r\nimport {Messages} from \"./messages\";\r\nimport {getOneProfileTC} from \"../../BLL/Reducers/profile-reducer\";\r\n\r\nlet mapStateToProps = (state: StoreStateType) => {\r\n    return {\r\n        messages: state.dialog.messages,\r\n        authorizationUserId: state.auth.userId,\r\n        users: state.dialog.users,\r\n        profile: state.profile.profile,\r\n\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: any)  => {\r\n    return {\r\n        selectedDialogMessages: (id: number, currentPages: any, pagesize: any) => {\r\n            dispatch(getSelectedDialogTC(id, currentPages,pagesize))\r\n        },\r\n        sendMessage: (id: number, text: string) => {\r\n            dispatch(senMessageTC(id, text))\r\n        },\r\n        usersTalkedWith: () => {\r\n            dispatch(getUsersTalkedWithTC())\r\n        }, getOneProfile: (id: number) => {\r\n            dispatch(getOneProfileTC(id))\r\n        },\r\n    }\r\n}\r\nconst MessagesContainer: any = compose(connect(mapStateToProps, mapDispatchToProps), WithAuthRedirect)(Messages)\r\nexport default MessagesContainer"],"sourceRoot":""}