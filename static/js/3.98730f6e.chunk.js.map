{"version":3,"sources":["ui-new/messages-page/messages.module.scss","ui-new/messages-page/send-message-form/send-message-form.module.scss","ui-new/messages-page/selected-chat/selected-chat.module.scss","ui-new/messages-page/chat-list/chat-list.module.scss","ui-new/messages-page/send-message-form/send-message-form.tsx","ui-new/messages-page/selected-chat/selectedChat.tsx","ui-new/messages-page/chat-list/chat-list.tsx","ui-new/HOC/with-auth-redirect.tsx","ui-new/messages-page/messages-container.tsx","ui-new/messages-page/messages.tsx"],"names":["module","exports","maxLengthCreator","maxLength","SendMessageReduxForm","reduxForm","form","props","onSubmit","handleSubmit","className","s","sendField","inputContainer","Field","placeholder","component","Textarea","name","validate","requiredField","printMess","type","sendMess","SelectedChat","useEffect","messageBody","document","querySelector","scrollTop","scrollHeight","clientHeight","setPage","recipientId","useState","page","chatContainer","id","totalCount","messages","length","btn","onClick","selectedDialogMessages","map","element","chat","authorizationUserId","senderId","my","sms","body","friend","ChatList","time","t","date","Date","getMonth","Number","substr","getDate","getFullYear","users","to","item","avatar","ava","src","photos","small","no_image","alt","main","userName","hasNewMessages","lastMessages","info","lastDialogActivityDate","newMessagesCount","countUnread","mapStateToPropsRedirect","state","isAuth","auth","isAuthorization","MessagesContainer","compose","connect","dialog","userId","profile","isFetching","getIsFetching","dispatch","currentPages","pagesize","getSelectedDialogTC","sendMessage","text","senMessageTC","usersTalkedWith","getUsersTalkedWithTC","getOneProfile","getOneProfileTC","Component","match","params","userID","block","container","allChats","iconMenuMobile","refreshAllChats","fieldUsers","selectedChat","undefined","userSelectedName","fullName","fieldChat","field","Preloader","values","massages"],"mappings":"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","file":"static/js/3.98730f6e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"messages_block__2BgDr\",\"container\":\"messages_container__3wtWU\",\"allChats\":\"messages_allChats__3mSfp\",\"iconMenuMobile\":\"messages_iconMenuMobile__1pmku\",\"refreshAllChats\":\"messages_refreshAllChats__1oqnY\",\"fieldUsers\":\"messages_fieldUsers__1_-08\",\"selectedChat\":\"messages_selectedChat__2_1DR\",\"userSelectedName\":\"messages_userSelectedName__3bVeo\",\"name\":\"messages_name__N0YZW\",\"fieldChat\":\"messages_fieldChat__1q_ON\",\"field\":\"messages_field__1z_ku\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sendField\":\"send-message-form_sendField__1rm3X\",\"inputContainer\":\"send-message-form_inputContainer__2QeCd\",\"printMess\":\"send-message-form_printMess__6KDYN\",\"sendMess\":\"send-message-form_sendMess__ZPsNd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatContainer\":\"selected-chat_chatContainer__2omSx\",\"btn\":\"selected-chat_btn__H0_-f\",\"chat\":\"selected-chat_chat__uw0az\",\"my\":\"selected-chat_my__a-DdE\",\"sms\":\"selected-chat_sms__33sON\",\"friend\":\"selected-chat_friend__1yZZ_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"chat-list_item__1sAej\",\"avatar\":\"chat-list_avatar__21FDM\",\"ava\":\"chat-list_ava__27ytM\",\"main\":\"chat-list_main__1V34l\",\"name\":\"chat-list_name__khjdj\",\"lastMessages\":\"chat-list_lastMessages__2KDrg\",\"info\":\"chat-list_info__3JFxE\",\"time\":\"chat-list_time__cMw-A\",\"countUnread\":\"chat-list_countUnread__3w6BA\"};","import\r\n{maxLength, requiredField} from \"../../utils/validators/validators\";\r\nimport s from \"./send-message-form.module.scss\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {FiSend} from \"react-icons/all\";\r\nimport React from \"react\";\r\nimport {Textarea} from \"../../Common/forms-control/FormsControl\";\r\n\r\nconst maxLengthCreator = maxLength(1000)\r\nconst SendMessageForm = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={s.sendField}>\r\n            <div className={s.inputContainer}>\r\n                <Field placeholder=\"Enter sms\"\r\n                       component={Textarea}\r\n                       name={\"massages\"}\r\n                       validate={[requiredField, maxLengthCreator]}\r\n                       props={{className: s.printMess}}\r\n                />\r\n            </div>\r\n            <button type='submit' className={s.sendMess}><FiSend/></button>\r\n        </form>\r\n    )\r\n}\r\nexport const SendMessageReduxForm = reduxForm({\r\n    form: \"dialog\"\r\n})(SendMessageForm)","import React, {useEffect, useState} from \"react\";\r\nimport s from \"./selected-chat.module.scss\";\r\n\r\nexport const SelectedChat = (props: any) => {\r\nuseEffect(()=>{\r\n    let messageBody = document.querySelector('#messageBody');\r\n    if (messageBody !== null) {\r\n        messageBody.scrollTop = messageBody.scrollHeight - messageBody.clientHeight;\r\n    }\r\n    setPage(2)\r\n},[props.recipientId])\r\n\r\n\r\n    let [page, setPage] = useState(2)\r\n\r\n\r\n    return (<div className={s.chatContainer} id=\"messageBody\">\r\n            {props.totalCount > props.messages.length\r\n                ? <button  className={s.btn} onClick={() => {\r\n                    props.selectedDialogMessages(props.recipientId, page, 20);\r\n                    setPage(++page)\r\n                }}>Загрузить еще</button>\r\n                : <></>}\r\n\r\n            {props.messages.map((element: any) =>\r\n                <div key={element.id} className={s.chat}>\r\n                    {props.authorizationUserId === element.senderId\r\n                        ?\r\n                        <div className={s.my}><p className={s.sms}>{element.body}</p></div>\r\n                        :\r\n                        <div className={s.friend}><p className={s.sms}>{element.body}</p>\r\n                        </div>}\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}","import {NavLink} from \"react-router-dom\";\r\nimport s from \"./chat-list.module.scss\";\r\nimport no_image from \"../../assets/img/no_image.png\";\r\nimport React from \"react\";\r\n\r\nexport const ChatList = (props: any) => {\r\n    let time = (t: any) => {\r\n        let date = new Date()\r\n        if (date.getMonth() === Number(t.substr(5, 2) - 1)\r\n            && date.getDate() === t.substr(8, 2)\r\n            && date.getFullYear() === t.substr(0, 4))\r\n            return t.substr(11, 5);\r\n        else return t.substr(5, 5)\r\n    }\r\n    return (\r\n        <>\r\n            {props.users.map((element: any) =>\r\n                <NavLink to={'/messages/' + element.id} key={element.id} className={s.item}>\r\n                    <div className={s.avatar}>\r\n                        <img className={s.ava}\r\n                             src={element.photos.small != null\r\n                                 ? element.photos.small\r\n                                 : no_image} alt={\"avatar\"}/>\r\n                    </div>\r\n                    <div className={s.main}>\r\n                        <div className={s.name}>{element.userName}</div>\r\n                        {element.hasNewMessages && <div className={s.lastMessages}>New messages!</div>}\r\n                    </div>\r\n                    <div className={s.info}>\r\n                        <div className={s.time}>{time(element.lastDialogActivityDate)}</div>\r\n                        {element.newMessagesCount !== 0 &&\r\n                        <div className={s.countUnread}>{element.newMessagesCount}</div>}\r\n\r\n                    </div>\r\n                </NavLink>)\r\n            }\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {StoreStateType} from \"../../BLL/store\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsRedirect = (state: StoreStateType): any => {\r\n    return {\r\n        isAuth: state.auth.isAuthorization\r\n    }\r\n}\r\n\r\n// хуки для переиспользования кода.\r\nexport const WithAuthRedirect = (Component: any) => {\r\n\r\n    const RedirectComponent = (props: any) => {\r\n        if (props.isAuth === false) return <Redirect to={\"/login\"}/>\r\n        return <Component {...props}/>\r\n    }\r\n    const ConnectRedirectComponent = connect(mapStateToPropsRedirect)(RedirectComponent)\r\n    return ConnectRedirectComponent;\r\n}","import {StoreStateType} from \"../../BLL/store\";\r\nimport {getSelectedDialogTC, getUsersTalkedWithTC, senMessageTC} from \"../../BLL/Reducers/dialogs-reducer\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {Messages} from \"./messages\";\r\nimport {getOneProfileTC} from \"../../BLL/Reducers/profile-reducer\";\r\nimport {WithAuthRedirect} from \"../HOC/with-auth-redirect\";\r\nimport {getIsFetching} from \"../../BLL/users-selectors\";\r\n\r\nlet mapStateToProps = (state: StoreStateType) => {\r\n    return {\r\n        messages: state.dialog.messages,\r\n        authorizationUserId: state.auth.userId,\r\n        users: state.dialog.users,\r\n        profile: state.profile.profile,\r\n        totalCount: state.dialog.totalCount,\r\n        isFetching: getIsFetching(state)\r\n\r\n\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: any)  => {\r\n    return {\r\n        selectedDialogMessages: (id: number, currentPages: any, pagesize: any) => {\r\n            dispatch(getSelectedDialogTC(id, currentPages,pagesize))\r\n        },\r\n        sendMessage: (id: number, text: string) => {\r\n            dispatch(senMessageTC(id, text))\r\n        },\r\n        usersTalkedWith: () => {\r\n            dispatch(getUsersTalkedWithTC())\r\n        }, getOneProfile: (id: number) => {\r\n            dispatch(getOneProfileTC(id))\r\n        },\r\n    }\r\n}\r\nconst MessagesContainer: any = compose(connect(mapStateToProps, mapDispatchToProps), WithAuthRedirect)(Messages)\r\nexport default MessagesContainer","import React, {useEffect} from 'react'\r\nimport s from \"./messages.module.scss\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {AiOutlineMenu, FiRefreshCcw} from \"react-icons/all\";\r\nimport {SendMessageReduxForm} from \"./send-message-form/send-message-form\";\r\nimport {SelectedChat} from \"./selected-chat/selectedChat\";\r\nimport {Preloader} from \"../Common/preloader/Preloader\";\r\nimport {ChatList} from \"./chat-list/chat-list\";\r\n\r\nexport const Messages = (props: any) => {\r\n    // от куда берется match???\r\n    let recipientId = props.match.params.userID\r\n\r\n    useEffect(() => {\r\n        if (recipientId) {\r\n            props.selectedDialogMessages(recipientId, 1, 20)\r\n            props.getOneProfile(recipientId)\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [recipientId])\r\n\r\n    useEffect(() => {\r\n        props.usersTalkedWith()\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    let sendMessage = (values: any) => {\r\n        //massages, потому что такое значение name у field, которое нам надо\r\n        props.sendMessage(recipientId, values.massages)\r\n    }\r\n\r\n    return (\r\n        <div className={s.block}>\r\n            <div className={s.container}>\r\n                <div className={s.allChats}>\r\n                    <div className={s.iconMenuMobile}>\r\n                        <AiOutlineMenu/>\r\n                    </div>\r\n                    <div className={s.refreshAllChats}>\r\n                        <NavLink to={'/messages/' + recipientId}>\r\n                            <div onClick={() => props.usersTalkedWith()}><FiRefreshCcw/></div>\r\n                        </NavLink>\r\n                    </div>\r\n\r\n                    <div className={s.fieldUsers}>\r\n\r\n                        {props.users != null\r\n                            ? <ChatList users={props.users}/>\r\n                            : <div>нет диалогов</div>}\r\n                    </div>\r\n                </div>\r\n                <div className={s.selectedChat}>\r\n                    {props.profile != null && recipientId !== undefined\r\n                        ?\r\n                        <div className={s.userSelectedName}>\r\n                            <div className={s.name}>{props.profile.fullName}</div>\r\n                        </div>\r\n                        :  <div className={s.userSelectedName}>\r\n                            <div className={s.name}>1</div>\r\n                        </div>\r\n                    }\r\n                    <div className={s.fieldChat}>\r\n                        {recipientId !== undefined\r\n                            ? props.messages != null && !props.isFetching\r\n                                ? <SelectedChat messages={props.messages}\r\n                                                authorizationUserId={props.authorizationUserId}\r\n                                                recipientId={recipientId}\r\n                                                selectedDialogMessages={props.selectedDialogMessages}\r\n                                                totalCount={props.totalCount}/>\r\n                                :<div className={s.field}><Preloader/></div>\r\n                            : <div className={s.field}>Выбери диалог</div>}\r\n                        <SendMessageReduxForm onSubmit={sendMessage}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}"],"sourceRoot":""}